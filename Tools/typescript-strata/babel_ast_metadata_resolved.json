{
  "nodeTypes": [
    "ArrayExpression",
    "AssignmentExpression",
    "BinaryExpression",
    "InterpreterDirective",
    "Directive",
    "DirectiveLiteral",
    "BlockStatement",
    "BreakStatement",
    "CallExpression",
    "CatchClause",
    "ConditionalExpression",
    "ContinueStatement",
    "DebuggerStatement",
    "DoWhileStatement",
    "EmptyStatement",
    "ExpressionStatement",
    "File",
    "ForInStatement",
    "ForStatement",
    "FunctionDeclaration",
    "FunctionExpression",
    "Identifier",
    "IfStatement",
    "LabeledStatement",
    "StringLiteral",
    "NumericLiteral",
    "NullLiteral",
    "BooleanLiteral",
    "RegExpLiteral",
    "LogicalExpression",
    "MemberExpression",
    "NewExpression",
    "Program",
    "ObjectExpression",
    "ObjectMethod",
    "ObjectProperty",
    "RestElement",
    "ReturnStatement",
    "SequenceExpression",
    "ParenthesizedExpression",
    "SwitchCase",
    "SwitchStatement",
    "ThisExpression",
    "ThrowStatement",
    "TryStatement",
    "UnaryExpression",
    "UpdateExpression",
    "VariableDeclaration",
    "VariableDeclarator",
    "WhileStatement",
    "WithStatement",
    "AssignmentPattern",
    "ArrayPattern",
    "ArrowFunctionExpression",
    "ClassBody",
    "ClassExpression",
    "ClassDeclaration",
    "ExportAllDeclaration",
    "ExportDefaultDeclaration",
    "ExportNamedDeclaration",
    "ExportSpecifier",
    "ForOfStatement",
    "ImportDeclaration",
    "ImportDefaultSpecifier",
    "ImportNamespaceSpecifier",
    "ImportSpecifier",
    "ImportExpression",
    "MetaProperty",
    "ClassMethod",
    "ObjectPattern",
    "SpreadElement",
    "Super",
    "TaggedTemplateExpression",
    "TemplateElement",
    "TemplateLiteral",
    "YieldExpression",
    "AwaitExpression",
    "Import",
    "BigIntLiteral",
    "ExportNamespaceSpecifier",
    "OptionalMemberExpression",
    "OptionalCallExpression",
    "ClassProperty",
    "ClassAccessorProperty",
    "ClassPrivateProperty",
    "ClassPrivateMethod",
    "PrivateName",
    "StaticBlock",
    "ImportAttribute",
    "AnyTypeAnnotation",
    "ArrayTypeAnnotation",
    "BooleanTypeAnnotation",
    "BooleanLiteralTypeAnnotation",
    "NullLiteralTypeAnnotation",
    "ClassImplements",
    "DeclareClass",
    "DeclareFunction",
    "DeclareInterface",
    "DeclareModule",
    "DeclareModuleExports",
    "DeclareTypeAlias",
    "DeclareOpaqueType",
    "DeclareVariable",
    "DeclareExportDeclaration",
    "DeclareExportAllDeclaration",
    "DeclaredPredicate",
    "ExistsTypeAnnotation",
    "FunctionTypeAnnotation",
    "FunctionTypeParam",
    "GenericTypeAnnotation",
    "InferredPredicate",
    "InterfaceExtends",
    "InterfaceDeclaration",
    "InterfaceTypeAnnotation",
    "IntersectionTypeAnnotation",
    "MixedTypeAnnotation",
    "EmptyTypeAnnotation",
    "NullableTypeAnnotation",
    "NumberLiteralTypeAnnotation",
    "NumberTypeAnnotation",
    "ObjectTypeAnnotation",
    "ObjectTypeInternalSlot",
    "ObjectTypeCallProperty",
    "ObjectTypeIndexer",
    "ObjectTypeProperty",
    "ObjectTypeSpreadProperty",
    "OpaqueType",
    "QualifiedTypeIdentifier",
    "StringLiteralTypeAnnotation",
    "StringTypeAnnotation",
    "SymbolTypeAnnotation",
    "ThisTypeAnnotation",
    "TupleTypeAnnotation",
    "TypeofTypeAnnotation",
    "TypeAlias",
    "TypeAnnotation",
    "TypeCastExpression",
    "TypeParameter",
    "TypeParameterDeclaration",
    "TypeParameterInstantiation",
    "UnionTypeAnnotation",
    "Variance",
    "VoidTypeAnnotation",
    "EnumDeclaration",
    "EnumBooleanBody",
    "EnumNumberBody",
    "EnumStringBody",
    "EnumSymbolBody",
    "EnumBooleanMember",
    "EnumNumberMember",
    "EnumStringMember",
    "EnumDefaultedMember",
    "IndexedAccessType",
    "OptionalIndexedAccessType",
    "JSXAttribute",
    "JSXClosingElement",
    "JSXElement",
    "JSXEmptyExpression",
    "JSXExpressionContainer",
    "JSXSpreadChild",
    "JSXIdentifier",
    "JSXMemberExpression",
    "JSXNamespacedName",
    "JSXOpeningElement",
    "JSXSpreadAttribute",
    "JSXText",
    "JSXFragment",
    "JSXOpeningFragment",
    "JSXClosingFragment",
    "Noop",
    "Placeholder",
    "V8IntrinsicIdentifier",
    "ArgumentPlaceholder",
    "BindExpression",
    "Decorator",
    "DoExpression",
    "ExportDefaultSpecifier",
    "RecordExpression",
    "TupleExpression",
    "DecimalLiteral",
    "ModuleExpression",
    "TopicReference",
    "PipelineTopicExpression",
    "PipelineBareFunction",
    "PipelinePrimaryTopicReference",
    "VoidPattern",
    "TSParameterProperty",
    "TSDeclareFunction",
    "TSDeclareMethod",
    "TSQualifiedName",
    "TSCallSignatureDeclaration",
    "TSConstructSignatureDeclaration",
    "TSPropertySignature",
    "TSMethodSignature",
    "TSIndexSignature",
    "TSAnyKeyword",
    "TSBooleanKeyword",
    "TSBigIntKeyword",
    "TSIntrinsicKeyword",
    "TSNeverKeyword",
    "TSNullKeyword",
    "TSNumberKeyword",
    "TSObjectKeyword",
    "TSStringKeyword",
    "TSSymbolKeyword",
    "TSUndefinedKeyword",
    "TSUnknownKeyword",
    "TSVoidKeyword",
    "TSThisType",
    "TSFunctionType",
    "TSConstructorType",
    "TSTypeReference",
    "TSTypePredicate",
    "TSTypeQuery",
    "TSTypeLiteral",
    "TSArrayType",
    "TSTupleType",
    "TSOptionalType",
    "TSRestType",
    "TSNamedTupleMember",
    "TSUnionType",
    "TSIntersectionType",
    "TSConditionalType",
    "TSInferType",
    "TSParenthesizedType",
    "TSTypeOperator",
    "TSIndexedAccessType",
    "TSMappedType",
    "TSTemplateLiteralType",
    "TSLiteralType",
    "TSExpressionWithTypeArguments",
    "TSInterfaceDeclaration",
    "TSInterfaceBody",
    "TSTypeAliasDeclaration",
    "TSInstantiationExpression",
    "TSAsExpression",
    "TSSatisfiesExpression",
    "TSTypeAssertion",
    "TSEnumBody",
    "TSEnumDeclaration",
    "TSEnumMember",
    "TSModuleDeclaration",
    "TSModuleBlock",
    "TSImportType",
    "TSImportEqualsDeclaration",
    "TSExternalModuleReference",
    "TSNonNullExpression",
    "TSExportAssignment",
    "TSNamespaceExportDeclaration",
    "TSTypeAnnotation",
    "TSTypeParameterInstantiation",
    "TSTypeParameterDeclaration",
    "TSTypeParameter"
  ],
  "nodeCategories": {
    "expressions": [
      "ArrayExpression",
      "AssignmentExpression",
      "BinaryExpression",
      "CallExpression",
      "ConditionalExpression",
      "FunctionExpression",
      "Identifier",
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "RegExpLiteral",
      "LogicalExpression",
      "MemberExpression",
      "NewExpression",
      "ObjectExpression",
      "SequenceExpression",
      "ParenthesizedExpression",
      "ThisExpression",
      "UnaryExpression",
      "UpdateExpression",
      "ArrowFunctionExpression",
      "ClassExpression",
      "ImportExpression",
      "MetaProperty",
      "Super",
      "TaggedTemplateExpression",
      "TemplateLiteral",
      "YieldExpression",
      "AwaitExpression",
      "Import",
      "BigIntLiteral",
      "OptionalMemberExpression",
      "OptionalCallExpression",
      "TypeCastExpression",
      "JSXElement",
      "JSXFragment",
      "BindExpression",
      "DoExpression",
      "RecordExpression",
      "TupleExpression",
      "DecimalLiteral",
      "ModuleExpression",
      "TopicReference",
      "PipelineTopicExpression",
      "PipelineBareFunction",
      "PipelinePrimaryTopicReference",
      "TSInstantiationExpression",
      "TSAsExpression",
      "TSSatisfiesExpression",
      "TSTypeAssertion",
      "TSNonNullExpression"
    ],
    "statements": [
      "BlockStatement",
      "BreakStatement",
      "ContinueStatement",
      "DebuggerStatement",
      "DoWhileStatement",
      "EmptyStatement",
      "ExpressionStatement",
      "ForInStatement",
      "ForStatement",
      "FunctionDeclaration",
      "IfStatement",
      "LabeledStatement",
      "ReturnStatement",
      "SwitchStatement",
      "ThrowStatement",
      "TryStatement",
      "VariableDeclaration",
      "WhileStatement",
      "WithStatement",
      "ClassDeclaration",
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ForOfStatement",
      "ImportDeclaration",
      "DeclareClass",
      "DeclareFunction",
      "DeclareInterface",
      "DeclareModule",
      "DeclareModuleExports",
      "DeclareTypeAlias",
      "DeclareOpaqueType",
      "DeclareVariable",
      "DeclareExportDeclaration",
      "DeclareExportAllDeclaration",
      "InterfaceDeclaration",
      "OpaqueType",
      "TypeAlias",
      "EnumDeclaration",
      "TSDeclareFunction",
      "TSInterfaceDeclaration",
      "TSTypeAliasDeclaration",
      "TSEnumDeclaration",
      "TSModuleDeclaration",
      "TSImportEqualsDeclaration",
      "TSExportAssignment",
      "TSNamespaceExportDeclaration"
    ],
    "declarations": [],
    "patterns": [
      "AssignmentPattern",
      "ArrayPattern",
      "ObjectPattern",
      "VoidPattern"
    ],
    "typescript": [
      "TSParameterProperty",
      "TSDeclareMethod",
      "TSQualifiedName",
      "TSCallSignatureDeclaration",
      "TSConstructSignatureDeclaration",
      "TSPropertySignature",
      "TSMethodSignature",
      "TSIndexSignature",
      "TSAnyKeyword",
      "TSBooleanKeyword",
      "TSBigIntKeyword",
      "TSIntrinsicKeyword",
      "TSNeverKeyword",
      "TSNullKeyword",
      "TSNumberKeyword",
      "TSObjectKeyword",
      "TSStringKeyword",
      "TSSymbolKeyword",
      "TSUndefinedKeyword",
      "TSUnknownKeyword",
      "TSVoidKeyword",
      "TSThisType",
      "TSFunctionType",
      "TSConstructorType",
      "TSTypeReference",
      "TSTypePredicate",
      "TSTypeQuery",
      "TSTypeLiteral",
      "TSArrayType",
      "TSTupleType",
      "TSOptionalType",
      "TSRestType",
      "TSNamedTupleMember",
      "TSUnionType",
      "TSIntersectionType",
      "TSConditionalType",
      "TSInferType",
      "TSParenthesizedType",
      "TSTypeOperator",
      "TSIndexedAccessType",
      "TSMappedType",
      "TSTemplateLiteralType",
      "TSLiteralType",
      "TSExpressionWithTypeArguments",
      "TSInterfaceBody",
      "TSEnumBody",
      "TSEnumMember",
      "TSModuleBlock",
      "TSImportType",
      "TSExternalModuleReference",
      "TSTypeAnnotation",
      "TSTypeParameterInstantiation",
      "TSTypeParameterDeclaration",
      "TSTypeParameter"
    ],
    "other": [
      "InterpreterDirective",
      "Directive",
      "DirectiveLiteral",
      "CatchClause",
      "File",
      "Program",
      "ObjectMethod",
      "ObjectProperty",
      "RestElement",
      "SwitchCase",
      "VariableDeclarator",
      "ClassBody",
      "ExportSpecifier",
      "ImportDefaultSpecifier",
      "ImportNamespaceSpecifier",
      "ImportSpecifier",
      "ClassMethod",
      "SpreadElement",
      "TemplateElement",
      "ExportNamespaceSpecifier",
      "ClassProperty",
      "ClassAccessorProperty",
      "ClassPrivateProperty",
      "ClassPrivateMethod",
      "PrivateName",
      "StaticBlock",
      "ImportAttribute",
      "AnyTypeAnnotation",
      "ArrayTypeAnnotation",
      "BooleanTypeAnnotation",
      "BooleanLiteralTypeAnnotation",
      "NullLiteralTypeAnnotation",
      "ClassImplements",
      "DeclaredPredicate",
      "ExistsTypeAnnotation",
      "FunctionTypeAnnotation",
      "FunctionTypeParam",
      "GenericTypeAnnotation",
      "InferredPredicate",
      "InterfaceExtends",
      "InterfaceTypeAnnotation",
      "IntersectionTypeAnnotation",
      "MixedTypeAnnotation",
      "EmptyTypeAnnotation",
      "NullableTypeAnnotation",
      "NumberLiteralTypeAnnotation",
      "NumberTypeAnnotation",
      "ObjectTypeAnnotation",
      "ObjectTypeInternalSlot",
      "ObjectTypeCallProperty",
      "ObjectTypeIndexer",
      "ObjectTypeProperty",
      "ObjectTypeSpreadProperty",
      "QualifiedTypeIdentifier",
      "StringLiteralTypeAnnotation",
      "StringTypeAnnotation",
      "SymbolTypeAnnotation",
      "ThisTypeAnnotation",
      "TupleTypeAnnotation",
      "TypeofTypeAnnotation",
      "TypeAnnotation",
      "TypeParameter",
      "TypeParameterDeclaration",
      "TypeParameterInstantiation",
      "UnionTypeAnnotation",
      "Variance",
      "VoidTypeAnnotation",
      "EnumBooleanBody",
      "EnumNumberBody",
      "EnumStringBody",
      "EnumSymbolBody",
      "EnumBooleanMember",
      "EnumNumberMember",
      "EnumStringMember",
      "EnumDefaultedMember",
      "IndexedAccessType",
      "OptionalIndexedAccessType",
      "JSXAttribute",
      "JSXClosingElement",
      "JSXEmptyExpression",
      "JSXExpressionContainer",
      "JSXSpreadChild",
      "JSXIdentifier",
      "JSXMemberExpression",
      "JSXNamespacedName",
      "JSXOpeningElement",
      "JSXSpreadAttribute",
      "JSXText",
      "JSXOpeningFragment",
      "JSXClosingFragment",
      "Noop",
      "Placeholder",
      "V8IntrinsicIdentifier",
      "ArgumentPlaceholder",
      "Decorator",
      "ExportDefaultSpecifier"
    ]
  },
  "nodeFields": {
    "ArrayExpression": {
      "elements": {
        "optional": false,
        "default": [],
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": null
            }
          ]
        }
      }
    },
    "AssignmentExpression": {
      "operator": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      },
      "left": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "MemberExpression",
            "RestElement",
            "AssignmentPattern",
            "ArrayPattern",
            "ObjectPattern",
            "TSParameterProperty",
            "TSAsExpression",
            "TSSatisfiesExpression",
            "TSTypeAssertion",
            "TSNonNullExpression",
            "OptionalMemberExpression"
          ]
        }
      },
      "right": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "BinaryExpression": {
      "operator": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "+",
            "-",
            "/",
            "%",
            "*",
            "**",
            "&",
            "|",
            ">>",
            ">>>",
            "<<",
            "^",
            "==",
            "===",
            "!=",
            "!==",
            "in",
            "instanceof",
            ">",
            "<",
            ">=",
            "<=",
            "|>"
          ]
        }
      },
      "left": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "PrivateName"
          ]
        }
      },
      "right": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "InterpreterDirective": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "Directive": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "DirectiveLiteral"
          ]
        }
      }
    },
    "DirectiveLiteral": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "BlockStatement": {
      "directives": {
        "optional": false,
        "default": [],
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Directive"
                ]
              }
            }
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Statement"
                ]
              }
            }
          ]
        }
      }
    },
    "BreakStatement": {
      "label": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "CallExpression": {
      "callee": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "Super",
            "V8IntrinsicIdentifier"
          ]
        }
      },
      "arguments": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Expression",
                  "SpreadElement",
                  "ArgumentPlaceholder"
                ]
              }
            }
          ]
        }
      },
      "typeArguments": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterInstantiation"
          ]
        }
      }
    },
    "CatchClause": {
      "param": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "ArrayPattern",
            "ObjectPattern"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      }
    },
    "ConditionalExpression": {
      "test": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "consequent": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "alternate": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "ContinueStatement": {
      "label": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "DebuggerStatement": {},
    "DoWhileStatement": {
      "test": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Statement"
          ]
        }
      }
    },
    "EmptyStatement": {},
    "ExpressionStatement": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "File": {
      "program": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Program"
          ]
        }
      },
      "comments": {
        "optional": true,
        "default": null,
        "validation": {
          "each": {
            "oneOfNodeTypes": [
              "CommentBlock",
              "CommentLine"
            ]
          }
        }
      },
      "tokens": {
        "optional": true,
        "default": null,
        "validation": {
          "each": {
            "type": "any"
          }
        }
      }
    },
    "ForInStatement": {
      "left": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "VariableDeclaration",
            "Identifier",
            "MemberExpression",
            "RestElement",
            "AssignmentPattern",
            "ArrayPattern",
            "ObjectPattern",
            "TSParameterProperty",
            "TSAsExpression",
            "TSSatisfiesExpression",
            "TSTypeAssertion",
            "TSNonNullExpression"
          ]
        }
      },
      "right": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Statement"
          ]
        }
      }
    },
    "ForStatement": {
      "init": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "VariableDeclaration",
            "Expression"
          ]
        }
      },
      "test": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "update": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Statement"
          ]
        }
      }
    },
    "FunctionDeclaration": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "FunctionParameter"
                ]
              }
            }
          ]
        }
      },
      "generator": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "async": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "id": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "returnType": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration",
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      },
      "predicate": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "DeclaredPredicate",
            "InferredPredicate"
          ]
        }
      }
    },
    "FunctionExpression": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "FunctionParameter"
                ]
              }
            }
          ]
        }
      },
      "generator": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "async": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "returnType": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration",
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      },
      "id": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      },
      "predicate": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "DeclaredPredicate",
            "InferredPredicate"
          ]
        }
      }
    },
    "Identifier": {
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "IfStatement": {
      "test": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "consequent": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Statement"
          ]
        }
      },
      "alternate": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Statement"
          ]
        }
      }
    },
    "LabeledStatement": {
      "label": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Statement"
          ]
        }
      }
    },
    "StringLiteral": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "NumericLiteral": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ]
        }
      }
    },
    "NullLiteral": {},
    "BooleanLiteral": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "RegExpLiteral": {
      "pattern": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      },
      "flags": {
        "optional": false,
        "default": "",
        "validation": {
          "type": "string"
        }
      }
    },
    "LogicalExpression": {
      "operator": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "||",
            "&&",
            "??"
          ]
        }
      },
      "left": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "right": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "MemberExpression": {
      "object": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "Super"
          ]
        }
      },
      "property": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "Identifier",
            "PrivateName"
          ]
        }
      },
      "computed": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "NewExpression": {
      "callee": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "Super",
            "V8IntrinsicIdentifier"
          ]
        }
      },
      "arguments": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Expression",
                  "SpreadElement",
                  "ArgumentPlaceholder"
                ]
              }
            }
          ]
        }
      },
      "typeArguments": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterInstantiation"
          ]
        }
      }
    },
    "Program": {
      "sourceType": {
        "optional": false,
        "default": "script",
        "validation": {
          "oneOf": [
            "script",
            "module"
          ]
        }
      },
      "interpreter": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "InterpreterDirective"
          ]
        }
      },
      "directives": {
        "optional": false,
        "default": [],
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Directive"
                ]
              }
            }
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Statement"
                ]
              }
            }
          ]
        }
      }
    },
    "ObjectExpression": {
      "properties": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ObjectMethod",
                  "ObjectProperty",
                  "SpreadElement"
                ]
              }
            }
          ]
        }
      }
    },
    "ObjectMethod": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "FunctionParameter"
                ]
              }
            }
          ]
        }
      },
      "generator": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "async": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "returnType": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration",
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      },
      "kind": {
        "optional": false,
        "default": "method",
        "validation": {
          "oneOf": [
            "method",
            "get",
            "set"
          ]
        }
      },
      "computed": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "Identifier",
            "StringLiteral",
            "NumericLiteral",
            "BigIntLiteral"
          ]
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      }
    },
    "ObjectProperty": {
      "computed": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "Identifier",
            "StringLiteral",
            "NumericLiteral",
            "BigIntLiteral",
            "DecimalLiteral",
            "PrivateName"
          ]
        }
      },
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "PatternLike"
          ]
        }
      },
      "shorthand": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      }
    },
    "RestElement": {
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "ArrayPattern",
            "ObjectPattern",
            "MemberExpression",
            "TSAsExpression",
            "TSSatisfiesExpression",
            "TSTypeAssertion",
            "TSNonNullExpression",
            "RestElement",
            "AssignmentPattern"
          ]
        }
      }
    },
    "ReturnStatement": {
      "argument": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "SequenceExpression": {
      "expressions": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Expression"
                ]
              }
            }
          ]
        }
      }
    },
    "ParenthesizedExpression": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "SwitchCase": {
      "test": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "consequent": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Statement"
                ]
              }
            }
          ]
        }
      }
    },
    "SwitchStatement": {
      "discriminant": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "cases": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "SwitchCase"
                ]
              }
            }
          ]
        }
      }
    },
    "ThisExpression": {},
    "ThrowStatement": {
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "TryStatement": {
      "block": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      },
      "handler": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "CatchClause"
          ]
        }
      },
      "finalizer": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      }
    },
    "UnaryExpression": {
      "prefix": {
        "optional": false,
        "default": true,
        "validation": {
          "type": "boolean"
        }
      },
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "operator": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "void",
            "throw",
            "delete",
            "!",
            "+",
            "-",
            "~",
            "typeof"
          ]
        }
      }
    },
    "UpdateExpression": {
      "prefix": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "operator": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "++",
            "--"
          ]
        }
      }
    },
    "VariableDeclaration": {
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "kind": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "var",
            "let",
            "const",
            "using",
            "await using"
          ]
        }
      },
      "declarations": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "VariableDeclarator"
                ]
              }
            }
          ]
        }
      }
    },
    "VariableDeclarator": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "MemberExpression",
            "RestElement",
            "AssignmentPattern",
            "ArrayPattern",
            "ObjectPattern",
            "TSParameterProperty",
            "TSAsExpression",
            "TSSatisfiesExpression",
            "TSTypeAssertion",
            "TSNonNullExpression",
            "VoidPattern"
          ]
        }
      },
      "definite": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "init": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "WhileStatement": {
      "test": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Statement"
          ]
        }
      }
    },
    "WithStatement": {
      "object": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Statement"
          ]
        }
      }
    },
    "AssignmentPattern": {
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "left": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "ObjectPattern",
            "ArrayPattern",
            "MemberExpression",
            "TSAsExpression",
            "TSSatisfiesExpression",
            "TSTypeAssertion",
            "TSNonNullExpression"
          ]
        }
      },
      "right": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "ArrayPattern": {
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "elements": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": null
            }
          ]
        }
      }
    },
    "ArrowFunctionExpression": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "FunctionParameter"
                ]
              }
            }
          ]
        }
      },
      "generator": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "async": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "returnType": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration",
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      },
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement",
            "Expression"
          ]
        }
      },
      "predicate": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "DeclaredPredicate",
            "InferredPredicate"
          ]
        }
      }
    },
    "ClassBody": {
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ClassMethod",
                  "ClassPrivateMethod",
                  "ClassProperty",
                  "ClassPrivateProperty",
                  "ClassAccessorProperty",
                  "TSDeclareMethod",
                  "TSIndexSignature",
                  "StaticBlock"
                ]
              }
            }
          ]
        }
      }
    },
    "ClassExpression": {
      "id": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration",
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "ClassBody"
          ]
        }
      },
      "superClass": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "superTypeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation",
            "TSTypeParameterInstantiation"
          ]
        }
      },
      "implements": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSExpressionWithTypeArguments",
                  "ClassImplements"
                ]
              }
            }
          ]
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "mixins": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "InterfaceExtends"
          ]
        }
      }
    },
    "ClassDeclaration": {
      "id": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration",
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "ClassBody"
          ]
        }
      },
      "superClass": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "superTypeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation",
            "TSTypeParameterInstantiation"
          ]
        }
      },
      "implements": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSExpressionWithTypeArguments",
                  "ClassImplements"
                ]
              }
            }
          ]
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "mixins": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "InterfaceExtends"
          ]
        }
      },
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "abstract": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "ExportAllDeclaration": {
      "source": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "StringLiteral"
          ]
        }
      },
      "exportKind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "type",
            "value"
          ]
        }
      },
      "attributes": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      },
      "assertions": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      }
    },
    "ExportDefaultDeclaration": {
      "declaration": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSDeclareFunction",
            "FunctionDeclaration",
            "ClassDeclaration",
            "Expression"
          ]
        }
      },
      "exportKind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "value"
          ]
        }
      }
    },
    "ExportNamedDeclaration": {
      "declaration": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Declaration"
          ]
        }
      },
      "attributes": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      },
      "assertions": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      },
      "specifiers": {
        "optional": false,
        "default": [],
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ExportSpecifier",
                  "ExportDefaultSpecifier",
                  "ExportNamespaceSpecifier"
                ]
              }
            }
          ]
        }
      },
      "source": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "StringLiteral"
          ]
        }
      },
      "exportKind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "type",
            "value"
          ]
        }
      }
    },
    "ExportSpecifier": {
      "local": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "exported": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "StringLiteral"
          ]
        }
      },
      "exportKind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "type",
            "value"
          ]
        }
      }
    },
    "ForOfStatement": {
      "left": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "VariableDeclaration",
            "Identifier",
            "MemberExpression",
            "RestElement",
            "AssignmentPattern",
            "ArrayPattern",
            "ObjectPattern",
            "TSParameterProperty",
            "TSAsExpression",
            "TSSatisfiesExpression",
            "TSTypeAssertion",
            "TSNonNullExpression"
          ]
        }
      },
      "right": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Statement"
          ]
        }
      },
      "await": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "ImportDeclaration": {
      "attributes": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      },
      "assertions": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      },
      "module": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "phase": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "source",
            "defer"
          ]
        }
      },
      "specifiers": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportSpecifier",
                  "ImportDefaultSpecifier",
                  "ImportNamespaceSpecifier"
                ]
              }
            }
          ]
        }
      },
      "source": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "StringLiteral"
          ]
        }
      },
      "importKind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "type",
            "typeof",
            "value"
          ]
        }
      }
    },
    "ImportDefaultSpecifier": {
      "local": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "ImportNamespaceSpecifier": {
      "local": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "ImportSpecifier": {
      "local": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "imported": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "StringLiteral"
          ]
        }
      },
      "importKind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "type",
            "typeof",
            "value"
          ]
        }
      }
    },
    "ImportExpression": {
      "phase": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "source",
            "defer"
          ]
        }
      },
      "source": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "options": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "MetaProperty": {
      "meta": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "property": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "ClassMethod": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "FunctionParameter",
                  "TSParameterProperty"
                ]
              }
            }
          ]
        }
      },
      "generator": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "async": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "abstract": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "accessibility": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "public",
            "private",
            "protected"
          ]
        }
      },
      "static": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "override": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "computed": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            null,
            {
              "oneOfNodeTypes": [
                "Identifier",
                "StringLiteral",
                "NumericLiteral",
                "BigIntLiteral",
                "Expression"
              ]
            }
          ]
        }
      },
      "kind": {
        "optional": false,
        "default": "method",
        "validation": {
          "oneOf": [
            "get",
            "set",
            "method",
            "constructor"
          ]
        }
      },
      "access": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "string"
            },
            {
              "oneOf": [
                "public",
                "private",
                "protected"
              ]
            }
          ]
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "returnType": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration",
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      }
    },
    "ObjectPattern": {
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "properties": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "RestElement",
                  "ObjectProperty"
                ]
              }
            }
          ]
        }
      }
    },
    "SpreadElement": {
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "Super": {},
    "TaggedTemplateExpression": {
      "tag": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "quasi": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TemplateLiteral"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation",
            "TSTypeParameterInstantiation"
          ]
        }
      }
    },
    "TemplateElement": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            null,
            null
          ]
        }
      },
      "tail": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "TemplateLiteral": {
      "quasis": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TemplateElement"
                ]
              }
            }
          ]
        }
      },
      "expressions": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Expression",
                  "TSType"
                ]
              }
            },
            null
          ]
        }
      }
    },
    "YieldExpression": {
      "delegate": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "argument": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "AwaitExpression": {
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "Import": {},
    "BigIntLiteral": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "ExportNamespaceSpecifier": {
      "exported": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "OptionalMemberExpression": {
      "object": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "property": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "Identifier"
          ]
        }
      },
      "computed": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "OptionalCallExpression": {
      "callee": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "arguments": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Expression",
                  "SpreadElement",
                  "ArgumentPlaceholder"
                ]
              }
            }
          ]
        }
      },
      "optional": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "typeArguments": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterInstantiation"
          ]
        }
      }
    },
    "ClassProperty": {
      "abstract": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "accessibility": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "public",
            "private",
            "protected"
          ]
        }
      },
      "static": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "override": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "computed": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            null,
            {
              "oneOfNodeTypes": [
                "Identifier",
                "StringLiteral",
                "NumericLiteral",
                "BigIntLiteral",
                "Expression"
              ]
            }
          ]
        }
      },
      "value": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "definite": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "readonly": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "variance": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Variance"
          ]
        }
      }
    },
    "ClassAccessorProperty": {
      "abstract": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "accessibility": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "public",
            "private",
            "protected"
          ]
        }
      },
      "static": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "override": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "computed": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            null,
            {
              "oneOfNodeTypes": [
                "Identifier",
                "StringLiteral",
                "NumericLiteral",
                "BigIntLiteral",
                "Expression",
                "PrivateName"
              ]
            }
          ]
        }
      },
      "value": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "definite": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "readonly": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "variance": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Variance"
          ]
        }
      }
    },
    "ClassPrivateProperty": {
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "PrivateName"
          ]
        }
      },
      "value": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "static": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "readonly": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "definite": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "variance": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Variance"
          ]
        }
      }
    },
    "ClassPrivateMethod": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "FunctionParameter",
                  "TSParameterProperty"
                ]
              }
            }
          ]
        }
      },
      "generator": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "async": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "abstract": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "accessibility": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "public",
            "private",
            "protected"
          ]
        }
      },
      "static": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "override": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "computed": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "PrivateName"
          ]
        }
      },
      "kind": {
        "optional": false,
        "default": "method",
        "validation": {
          "oneOf": [
            "get",
            "set",
            "method"
          ]
        }
      },
      "access": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "string"
            },
            {
              "oneOf": [
                "public",
                "private",
                "protected"
              ]
            }
          ]
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "returnType": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration",
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      }
    },
    "PrivateName": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "StaticBlock": {
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Statement"
                ]
              }
            }
          ]
        }
      }
    },
    "ImportAttribute": {
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "StringLiteral"
          ]
        }
      },
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "StringLiteral"
          ]
        }
      }
    },
    "AnyTypeAnnotation": {},
    "ArrayTypeAnnotation": {
      "elementType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "BooleanTypeAnnotation": {},
    "BooleanLiteralTypeAnnotation": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "NullLiteralTypeAnnotation": {},
    "ClassImplements": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation"
          ]
        }
      }
    },
    "DeclareClass": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration"
          ]
        }
      },
      "extends": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "InterfaceExtends"
                ]
              }
            }
          ]
        }
      },
      "mixins": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "InterfaceExtends"
                ]
              }
            }
          ]
        }
      },
      "implements": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ClassImplements"
                ]
              }
            }
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "ObjectTypeAnnotation"
          ]
        }
      }
    },
    "DeclareFunction": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "predicate": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "DeclaredPredicate"
          ]
        }
      }
    },
    "DeclareInterface": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration"
          ]
        }
      },
      "extends": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "InterfaceExtends"
                ]
              }
            }
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "ObjectTypeAnnotation"
          ]
        }
      }
    },
    "DeclareModule": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "StringLiteral"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      },
      "kind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "CommonJS",
            "ES"
          ]
        }
      }
    },
    "DeclareModuleExports": {
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation"
          ]
        }
      }
    },
    "DeclareTypeAlias": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration"
          ]
        }
      },
      "right": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "DeclareOpaqueType": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration"
          ]
        }
      },
      "supertype": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "impltype": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "DeclareVariable": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "DeclareExportDeclaration": {
      "declaration": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ClassImplements",
            "DeclareClass",
            "DeclareFunction",
            "DeclareInterface",
            "DeclareModule",
            "DeclareModuleExports",
            "DeclareTypeAlias",
            "DeclareOpaqueType",
            "DeclareVariable",
            "DeclareExportDeclaration",
            "DeclareExportAllDeclaration",
            "DeclaredPredicate",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "FunctionTypeParam",
            "GenericTypeAnnotation",
            "InferredPredicate",
            "InterfaceExtends",
            "InterfaceDeclaration",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "ObjectTypeInternalSlot",
            "ObjectTypeCallProperty",
            "ObjectTypeIndexer",
            "ObjectTypeProperty",
            "ObjectTypeSpreadProperty",
            "OpaqueType",
            "QualifiedTypeIdentifier",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "TypeAlias",
            "TypeAnnotation",
            "TypeCastExpression",
            "TypeParameter",
            "TypeParameterDeclaration",
            "TypeParameterInstantiation",
            "UnionTypeAnnotation",
            "Variance",
            "VoidTypeAnnotation",
            "EnumDeclaration",
            "EnumBooleanBody",
            "EnumNumberBody",
            "EnumStringBody",
            "EnumSymbolBody",
            "EnumBooleanMember",
            "EnumNumberMember",
            "EnumStringMember",
            "EnumDefaultedMember",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "specifiers": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ExportSpecifier",
                  "ExportNamespaceSpecifier"
                ]
              }
            }
          ]
        }
      },
      "source": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "StringLiteral"
          ]
        }
      },
      "default": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "attributes": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      },
      "assertions": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      }
    },
    "DeclareExportAllDeclaration": {
      "source": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "StringLiteral"
          ]
        }
      },
      "exportKind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "type",
            "value"
          ]
        }
      },
      "attributes": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      },
      "assertions": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ImportAttribute"
                ]
              }
            }
          ]
        }
      }
    },
    "DeclaredPredicate": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ClassImplements",
            "DeclareClass",
            "DeclareFunction",
            "DeclareInterface",
            "DeclareModule",
            "DeclareModuleExports",
            "DeclareTypeAlias",
            "DeclareOpaqueType",
            "DeclareVariable",
            "DeclareExportDeclaration",
            "DeclareExportAllDeclaration",
            "DeclaredPredicate",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "FunctionTypeParam",
            "GenericTypeAnnotation",
            "InferredPredicate",
            "InterfaceExtends",
            "InterfaceDeclaration",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "ObjectTypeInternalSlot",
            "ObjectTypeCallProperty",
            "ObjectTypeIndexer",
            "ObjectTypeProperty",
            "ObjectTypeSpreadProperty",
            "OpaqueType",
            "QualifiedTypeIdentifier",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "TypeAlias",
            "TypeAnnotation",
            "TypeCastExpression",
            "TypeParameter",
            "TypeParameterDeclaration",
            "TypeParameterInstantiation",
            "UnionTypeAnnotation",
            "Variance",
            "VoidTypeAnnotation",
            "EnumDeclaration",
            "EnumBooleanBody",
            "EnumNumberBody",
            "EnumStringBody",
            "EnumSymbolBody",
            "EnumBooleanMember",
            "EnumNumberMember",
            "EnumStringMember",
            "EnumDefaultedMember",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "ExistsTypeAnnotation": {},
    "FunctionTypeAnnotation": {
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration"
          ]
        }
      },
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "FunctionTypeParam"
                ]
              }
            }
          ]
        }
      },
      "rest": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "FunctionTypeParam"
          ]
        }
      },
      "this": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "FunctionTypeParam"
          ]
        }
      },
      "returnType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "FunctionTypeParam": {
      "name": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "GenericTypeAnnotation": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "QualifiedTypeIdentifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation"
          ]
        }
      }
    },
    "InferredPredicate": {},
    "InterfaceExtends": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "QualifiedTypeIdentifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation"
          ]
        }
      }
    },
    "InterfaceDeclaration": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration"
          ]
        }
      },
      "extends": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "InterfaceExtends"
                ]
              }
            }
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "ObjectTypeAnnotation"
          ]
        }
      }
    },
    "InterfaceTypeAnnotation": {
      "extends": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "InterfaceExtends"
                ]
              }
            }
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "ObjectTypeAnnotation"
          ]
        }
      }
    },
    "IntersectionTypeAnnotation": {
      "types": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "AnyTypeAnnotation",
                  "ArrayTypeAnnotation",
                  "BooleanTypeAnnotation",
                  "BooleanLiteralTypeAnnotation",
                  "NullLiteralTypeAnnotation",
                  "ExistsTypeAnnotation",
                  "FunctionTypeAnnotation",
                  "GenericTypeAnnotation",
                  "InterfaceTypeAnnotation",
                  "IntersectionTypeAnnotation",
                  "MixedTypeAnnotation",
                  "EmptyTypeAnnotation",
                  "NullableTypeAnnotation",
                  "NumberLiteralTypeAnnotation",
                  "NumberTypeAnnotation",
                  "ObjectTypeAnnotation",
                  "StringLiteralTypeAnnotation",
                  "StringTypeAnnotation",
                  "SymbolTypeAnnotation",
                  "ThisTypeAnnotation",
                  "TupleTypeAnnotation",
                  "TypeofTypeAnnotation",
                  "UnionTypeAnnotation",
                  "VoidTypeAnnotation",
                  "IndexedAccessType",
                  "OptionalIndexedAccessType"
                ]
              }
            }
          ]
        }
      }
    },
    "MixedTypeAnnotation": {},
    "EmptyTypeAnnotation": {},
    "NullableTypeAnnotation": {
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "NumberLiteralTypeAnnotation": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "number"
        }
      }
    },
    "NumberTypeAnnotation": {},
    "ObjectTypeAnnotation": {
      "properties": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ObjectTypeProperty",
                  "ObjectTypeSpreadProperty"
                ]
              }
            }
          ]
        }
      },
      "indexers": {
        "optional": true,
        "default": [],
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ObjectTypeIndexer"
                ]
              }
            }
          ]
        }
      },
      "callProperties": {
        "optional": true,
        "default": [],
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ObjectTypeCallProperty"
                ]
              }
            }
          ]
        }
      },
      "internalSlots": {
        "optional": true,
        "default": [],
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ObjectTypeInternalSlot"
                ]
              }
            }
          ]
        }
      },
      "exact": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "inexact": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "ObjectTypeInternalSlot": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "optional": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "static": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "method": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "ObjectTypeCallProperty": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "static": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "ObjectTypeIndexer": {
      "id": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "static": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "variance": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Variance"
          ]
        }
      }
    },
    "ObjectTypeProperty": {
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "StringLiteral"
          ]
        }
      },
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "kind": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "init",
            "get",
            "set"
          ]
        }
      },
      "static": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "proto": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "variance": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Variance"
          ]
        }
      },
      "method": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "ObjectTypeSpreadProperty": {
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "OpaqueType": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration"
          ]
        }
      },
      "supertype": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "impltype": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "QualifiedTypeIdentifier": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "qualification": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "QualifiedTypeIdentifier"
          ]
        }
      }
    },
    "StringLiteralTypeAnnotation": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "StringTypeAnnotation": {},
    "SymbolTypeAnnotation": {},
    "ThisTypeAnnotation": {},
    "TupleTypeAnnotation": {
      "types": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "AnyTypeAnnotation",
                  "ArrayTypeAnnotation",
                  "BooleanTypeAnnotation",
                  "BooleanLiteralTypeAnnotation",
                  "NullLiteralTypeAnnotation",
                  "ExistsTypeAnnotation",
                  "FunctionTypeAnnotation",
                  "GenericTypeAnnotation",
                  "InterfaceTypeAnnotation",
                  "IntersectionTypeAnnotation",
                  "MixedTypeAnnotation",
                  "EmptyTypeAnnotation",
                  "NullableTypeAnnotation",
                  "NumberLiteralTypeAnnotation",
                  "NumberTypeAnnotation",
                  "ObjectTypeAnnotation",
                  "StringLiteralTypeAnnotation",
                  "StringTypeAnnotation",
                  "SymbolTypeAnnotation",
                  "ThisTypeAnnotation",
                  "TupleTypeAnnotation",
                  "TypeofTypeAnnotation",
                  "UnionTypeAnnotation",
                  "VoidTypeAnnotation",
                  "IndexedAccessType",
                  "OptionalIndexedAccessType"
                ]
              }
            }
          ]
        }
      }
    },
    "TypeofTypeAnnotation": {
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "TypeAlias": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterDeclaration"
          ]
        }
      },
      "right": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "TypeAnnotation": {
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "TypeCastExpression": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation"
          ]
        }
      }
    },
    "TypeParameter": {
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      },
      "bound": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation"
          ]
        }
      },
      "default": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "variance": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Variance"
          ]
        }
      }
    },
    "TypeParameterDeclaration": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TypeParameter"
                ]
              }
            }
          ]
        }
      }
    },
    "TypeParameterInstantiation": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "AnyTypeAnnotation",
                  "ArrayTypeAnnotation",
                  "BooleanTypeAnnotation",
                  "BooleanLiteralTypeAnnotation",
                  "NullLiteralTypeAnnotation",
                  "ExistsTypeAnnotation",
                  "FunctionTypeAnnotation",
                  "GenericTypeAnnotation",
                  "InterfaceTypeAnnotation",
                  "IntersectionTypeAnnotation",
                  "MixedTypeAnnotation",
                  "EmptyTypeAnnotation",
                  "NullableTypeAnnotation",
                  "NumberLiteralTypeAnnotation",
                  "NumberTypeAnnotation",
                  "ObjectTypeAnnotation",
                  "StringLiteralTypeAnnotation",
                  "StringTypeAnnotation",
                  "SymbolTypeAnnotation",
                  "ThisTypeAnnotation",
                  "TupleTypeAnnotation",
                  "TypeofTypeAnnotation",
                  "UnionTypeAnnotation",
                  "VoidTypeAnnotation",
                  "IndexedAccessType",
                  "OptionalIndexedAccessType"
                ]
              }
            }
          ]
        }
      }
    },
    "UnionTypeAnnotation": {
      "types": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "AnyTypeAnnotation",
                  "ArrayTypeAnnotation",
                  "BooleanTypeAnnotation",
                  "BooleanLiteralTypeAnnotation",
                  "NullLiteralTypeAnnotation",
                  "ExistsTypeAnnotation",
                  "FunctionTypeAnnotation",
                  "GenericTypeAnnotation",
                  "InterfaceTypeAnnotation",
                  "IntersectionTypeAnnotation",
                  "MixedTypeAnnotation",
                  "EmptyTypeAnnotation",
                  "NullableTypeAnnotation",
                  "NumberLiteralTypeAnnotation",
                  "NumberTypeAnnotation",
                  "ObjectTypeAnnotation",
                  "StringLiteralTypeAnnotation",
                  "StringTypeAnnotation",
                  "SymbolTypeAnnotation",
                  "ThisTypeAnnotation",
                  "TupleTypeAnnotation",
                  "TypeofTypeAnnotation",
                  "UnionTypeAnnotation",
                  "VoidTypeAnnotation",
                  "IndexedAccessType",
                  "OptionalIndexedAccessType"
                ]
              }
            }
          ]
        }
      }
    },
    "Variance": {
      "kind": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "minus",
            "plus"
          ]
        }
      }
    },
    "VoidTypeAnnotation": {},
    "EnumDeclaration": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "EnumBooleanBody",
            "EnumNumberBody",
            "EnumStringBody",
            "EnumSymbolBody"
          ]
        }
      }
    },
    "EnumBooleanBody": {
      "explicitType": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "members": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "EnumBooleanMember"
                ]
              }
            }
          ]
        }
      },
      "hasUnknownMembers": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "EnumNumberBody": {
      "explicitType": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "members": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "EnumNumberMember"
                ]
              }
            }
          ]
        }
      },
      "hasUnknownMembers": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "EnumStringBody": {
      "explicitType": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "members": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "EnumStringMember",
                  "EnumDefaultedMember"
                ]
              }
            }
          ]
        }
      },
      "hasUnknownMembers": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "EnumSymbolBody": {
      "members": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "EnumDefaultedMember"
                ]
              }
            }
          ]
        }
      },
      "hasUnknownMembers": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "EnumBooleanMember": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "init": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BooleanLiteral"
          ]
        }
      }
    },
    "EnumNumberMember": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "init": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "NumericLiteral"
          ]
        }
      }
    },
    "EnumStringMember": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "init": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "StringLiteral"
          ]
        }
      }
    },
    "EnumDefaultedMember": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "IndexedAccessType": {
      "objectType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "indexType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      }
    },
    "OptionalIndexedAccessType": {
      "objectType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "indexType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "AnyTypeAnnotation",
            "ArrayTypeAnnotation",
            "BooleanTypeAnnotation",
            "BooleanLiteralTypeAnnotation",
            "NullLiteralTypeAnnotation",
            "ExistsTypeAnnotation",
            "FunctionTypeAnnotation",
            "GenericTypeAnnotation",
            "InterfaceTypeAnnotation",
            "IntersectionTypeAnnotation",
            "MixedTypeAnnotation",
            "EmptyTypeAnnotation",
            "NullableTypeAnnotation",
            "NumberLiteralTypeAnnotation",
            "NumberTypeAnnotation",
            "ObjectTypeAnnotation",
            "StringLiteralTypeAnnotation",
            "StringTypeAnnotation",
            "SymbolTypeAnnotation",
            "ThisTypeAnnotation",
            "TupleTypeAnnotation",
            "TypeofTypeAnnotation",
            "UnionTypeAnnotation",
            "VoidTypeAnnotation",
            "IndexedAccessType",
            "OptionalIndexedAccessType"
          ]
        }
      },
      "optional": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "JSXAttribute": {
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXIdentifier",
            "JSXNamespacedName"
          ]
        }
      },
      "value": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXElement",
            "JSXFragment",
            "StringLiteral",
            "JSXExpressionContainer"
          ]
        }
      }
    },
    "JSXClosingElement": {
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXIdentifier",
            "JSXMemberExpression",
            "JSXNamespacedName"
          ]
        }
      }
    },
    "JSXElement": {
      "openingElement": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXOpeningElement"
          ]
        }
      },
      "closingElement": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXClosingElement"
          ]
        }
      },
      "children": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "JSXText",
                  "JSXExpressionContainer",
                  "JSXSpreadChild",
                  "JSXElement",
                  "JSXFragment"
                ]
              }
            }
          ]
        }
      },
      "selfClosing": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "JSXEmptyExpression": {},
    "JSXExpressionContainer": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression",
            "JSXEmptyExpression"
          ]
        }
      }
    },
    "JSXSpreadChild": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "JSXIdentifier": {
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "JSXMemberExpression": {
      "object": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXMemberExpression",
            "JSXIdentifier"
          ]
        }
      },
      "property": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXIdentifier"
          ]
        }
      }
    },
    "JSXNamespacedName": {
      "namespace": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXIdentifier"
          ]
        }
      },
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXIdentifier"
          ]
        }
      }
    },
    "JSXOpeningElement": {
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXIdentifier",
            "JSXMemberExpression",
            "JSXNamespacedName"
          ]
        }
      },
      "selfClosing": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "attributes": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "JSXAttribute",
                  "JSXSpreadAttribute"
                ]
              }
            }
          ]
        }
      },
      "typeArguments": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeParameterInstantiation"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterInstantiation"
          ]
        }
      }
    },
    "JSXSpreadAttribute": {
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "JSXText": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "JSXFragment": {
      "openingFragment": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXOpeningFragment"
          ]
        }
      },
      "closingFragment": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "JSXClosingFragment"
          ]
        }
      },
      "children": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "JSXText",
                  "JSXExpressionContainer",
                  "JSXSpreadChild",
                  "JSXElement",
                  "JSXFragment"
                ]
              }
            }
          ]
        }
      }
    },
    "JSXOpeningFragment": {},
    "JSXClosingFragment": {},
    "Noop": {},
    "Placeholder": {
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "expectedNode": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "Identifier",
            "StringLiteral",
            "Expression",
            "Statement",
            "Declaration",
            "BlockStatement",
            "ClassBody",
            "Pattern"
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TypeAnnotation",
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      }
    },
    "V8IntrinsicIdentifier": {
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "ArgumentPlaceholder": {},
    "BindExpression": {
      "object": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "callee": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "Decorator": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "DoExpression": {
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "BlockStatement"
          ]
        }
      },
      "async": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "ExportDefaultSpecifier": {
      "exported": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "RecordExpression": {
      "properties": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ObjectProperty",
                  "SpreadElement"
                ]
              }
            }
          ]
        }
      }
    },
    "TupleExpression": {
      "elements": {
        "optional": false,
        "default": [],
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Expression",
                  "SpreadElement"
                ]
              }
            }
          ]
        }
      }
    },
    "DecimalLiteral": {
      "value": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      }
    },
    "ModuleExpression": {
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Program"
          ]
        }
      }
    },
    "TopicReference": {},
    "PipelineTopicExpression": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "PipelineBareFunction": {
      "callee": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "PipelinePrimaryTopicReference": {},
    "VoidPattern": {},
    "TSParameterProperty": {
      "accessibility": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "public",
            "private",
            "protected"
          ]
        }
      },
      "readonly": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "parameter": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "AssignmentPattern"
          ]
        }
      },
      "override": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      }
    },
    "TSDeclareFunction": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "FunctionParameter"
                ]
              }
            }
          ]
        }
      },
      "generator": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "async": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "id": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "returnType": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      }
    },
    "TSDeclareMethod": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "FunctionParameter",
                  "TSParameterProperty"
                ]
              }
            }
          ]
        }
      },
      "generator": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "async": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "abstract": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "accessibility": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "public",
            "private",
            "protected"
          ]
        }
      },
      "static": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "override": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "computed": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            null,
            {
              "oneOfNodeTypes": [
                "Identifier",
                "StringLiteral",
                "NumericLiteral",
                "BigIntLiteral",
                "Expression"
              ]
            }
          ]
        }
      },
      "kind": {
        "optional": true,
        "default": "method",
        "validation": {
          "oneOf": [
            "get",
            "set",
            "method",
            "constructor"
          ]
        }
      },
      "access": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "string"
            },
            {
              "oneOf": [
                "public",
                "private",
                "protected"
              ]
            }
          ]
        }
      },
      "decorators": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Decorator"
                ]
              }
            }
          ]
        }
      },
      "returnType": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation",
            "Noop"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterDeclaration",
            "Noop"
          ]
        }
      }
    },
    "TSQualifiedName": {
      "left": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSEntityName"
          ]
        }
      },
      "right": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "TSCallSignatureDeclaration": {
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterDeclaration"
          ]
        }
      },
      "parameters": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ArrayPattern",
                  "Identifier",
                  "ObjectPattern",
                  "RestElement"
                ]
              }
            }
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation"
          ]
        }
      }
    },
    "TSConstructSignatureDeclaration": {
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterDeclaration"
          ]
        }
      },
      "parameters": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ArrayPattern",
                  "Identifier",
                  "ObjectPattern",
                  "RestElement"
                ]
              }
            }
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation"
          ]
        }
      }
    },
    "TSPropertySignature": {
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "computed": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "readonly": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation"
          ]
        }
      },
      "kind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "get",
            "set"
          ]
        }
      }
    },
    "TSMethodSignature": {
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterDeclaration"
          ]
        }
      },
      "parameters": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ArrayPattern",
                  "Identifier",
                  "ObjectPattern",
                  "RestElement"
                ]
              }
            }
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation"
          ]
        }
      },
      "key": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "computed": {
        "optional": true,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "kind": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "method",
            "get",
            "set"
          ]
        }
      }
    },
    "TSIndexSignature": {
      "readonly": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "static": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "parameters": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Identifier"
                ]
              }
            }
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation"
          ]
        }
      }
    },
    "TSAnyKeyword": {},
    "TSBooleanKeyword": {},
    "TSBigIntKeyword": {},
    "TSIntrinsicKeyword": {},
    "TSNeverKeyword": {},
    "TSNullKeyword": {},
    "TSNumberKeyword": {},
    "TSObjectKeyword": {},
    "TSStringKeyword": {},
    "TSSymbolKeyword": {},
    "TSUndefinedKeyword": {},
    "TSUnknownKeyword": {},
    "TSVoidKeyword": {},
    "TSThisType": {},
    "TSFunctionType": {
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterDeclaration"
          ]
        }
      },
      "parameters": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ArrayPattern",
                  "Identifier",
                  "ObjectPattern",
                  "RestElement"
                ]
              }
            }
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation"
          ]
        }
      }
    },
    "TSConstructorType": {
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterDeclaration"
          ]
        }
      },
      "parameters": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "ArrayPattern",
                  "Identifier",
                  "ObjectPattern",
                  "RestElement"
                ]
              }
            }
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation"
          ]
        }
      },
      "abstract": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "TSTypeReference": {
      "typeName": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSEntityName"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterInstantiation"
          ]
        }
      }
    },
    "TSTypePredicate": {
      "parameterName": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "TSThisType"
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeAnnotation"
          ]
        }
      },
      "asserts": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      }
    },
    "TSTypeQuery": {
      "exprName": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSEntityName",
            "TSImportType"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterInstantiation"
          ]
        }
      }
    },
    "TSTypeLiteral": {
      "members": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSCallSignatureDeclaration",
                  "TSConstructSignatureDeclaration",
                  "TSPropertySignature",
                  "TSMethodSignature",
                  "TSIndexSignature"
                ]
              }
            }
          ]
        }
      }
    },
    "TSArrayType": {
      "elementType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSTupleType": {
      "elementTypes": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSType",
                  "TSNamedTupleMember"
                ]
              }
            }
          ]
        }
      }
    },
    "TSOptionalType": {
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSRestType": {
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSNamedTupleMember": {
      "label": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "optional": {
        "optional": false,
        "default": false,
        "validation": {
          "type": "boolean"
        }
      },
      "elementType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSUnionType": {
      "types": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSType"
                ]
              }
            }
          ]
        }
      }
    },
    "TSIntersectionType": {
      "types": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSType"
                ]
              }
            }
          ]
        }
      }
    },
    "TSConditionalType": {
      "checkType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      },
      "extendsType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      },
      "trueType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      },
      "falseType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSInferType": {
      "typeParameter": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameter"
          ]
        }
      }
    },
    "TSParenthesizedType": {
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSTypeOperator": {
      "operator": {
        "optional": false,
        "default": "keyof",
        "validation": {
          "type": "string"
        }
      },
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSIndexedAccessType": {
      "objectType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      },
      "indexType": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSMappedType": {
      "typeParameter": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameter"
          ]
        }
      },
      "readonly": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            true,
            false,
            "+",
            "-"
          ]
        }
      },
      "optional": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            true,
            false,
            "+",
            "-"
          ]
        }
      },
      "typeAnnotation": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      },
      "nameType": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSTemplateLiteralType": {
      "quasis": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TemplateElement"
                ]
              }
            }
          ]
        }
      },
      "types": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSType"
                ]
              }
            },
            null
          ]
        }
      }
    },
    "TSLiteralType": {
      "literal": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "NumericLiteral",
            "StringLiteral",
            "BooleanLiteral",
            "BigIntLiteral",
            "TemplateLiteral",
            "UnaryExpression"
          ]
        }
      }
    },
    "TSExpressionWithTypeArguments": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSEntityName"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterInstantiation"
          ]
        }
      }
    },
    "TSInterfaceDeclaration": {
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterDeclaration"
          ]
        }
      },
      "extends": {
        "optional": true,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSExpressionWithTypeArguments"
                ]
              }
            }
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSInterfaceBody"
          ]
        }
      }
    },
    "TSInterfaceBody": {
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSCallSignatureDeclaration",
                  "TSConstructSignatureDeclaration",
                  "TSPropertySignature",
                  "TSMethodSignature",
                  "TSIndexSignature"
                ]
              }
            }
          ]
        }
      }
    },
    "TSTypeAliasDeclaration": {
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterDeclaration"
          ]
        }
      },
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSInstantiationExpression": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterInstantiation"
          ]
        }
      }
    },
    "TSAsExpression": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSSatisfiesExpression": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSTypeAssertion": {
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      },
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "TSEnumBody": {
      "members": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSEnumMember"
                ]
              }
            }
          ]
        }
      }
    },
    "TSEnumDeclaration": {
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "const": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "members": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSEnumMember"
                ]
              }
            }
          ]
        }
      },
      "initializer": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      },
      "body": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSEnumBody"
          ]
        }
      }
    },
    "TSEnumMember": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "StringLiteral"
          ]
        }
      },
      "initializer": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "TSModuleDeclaration": {
      "kind": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOf": [
            "global",
            "module",
            "namespace"
          ]
        }
      },
      "declare": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "global": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier",
            "StringLiteral"
          ]
        }
      },
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSModuleBlock",
            "TSModuleDeclaration"
          ]
        }
      }
    },
    "TSModuleBlock": {
      "body": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "Statement"
                ]
              }
            }
          ]
        }
      }
    },
    "TSImportType": {
      "argument": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "StringLiteral"
          ]
        }
      },
      "qualifier": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSEntityName"
          ]
        }
      },
      "typeParameters": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSTypeParameterInstantiation"
          ]
        }
      },
      "options": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "ObjectExpression"
          ]
        }
      }
    },
    "TSImportEqualsDeclaration": {
      "isExport": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      },
      "moduleReference": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSEntityName",
            "TSExternalModuleReference"
          ]
        }
      },
      "importKind": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOf": [
            "type",
            "value"
          ]
        }
      }
    },
    "TSExternalModuleReference": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "StringLiteral"
          ]
        }
      }
    },
    "TSNonNullExpression": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "TSExportAssignment": {
      "expression": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Expression"
          ]
        }
      }
    },
    "TSNamespaceExportDeclaration": {
      "id": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "Identifier"
          ]
        }
      }
    },
    "TSTypeAnnotation": {
      "typeAnnotation": {
        "optional": false,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    },
    "TSTypeParameterInstantiation": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSType"
                ]
              }
            }
          ]
        }
      }
    },
    "TSTypeParameterDeclaration": {
      "params": {
        "optional": false,
        "default": null,
        "validation": {
          "chainOf": [
            {
              "type": "array"
            },
            {
              "each": {
                "oneOfNodeTypes": [
                  "TSTypeParameter"
                ]
              }
            }
          ]
        }
      }
    },
    "TSTypeParameter": {
      "name": {
        "optional": false,
        "default": null,
        "validation": {
          "type": "string"
        }
      },
      "in": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "out": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "const": {
        "optional": true,
        "default": null,
        "validation": {
          "type": "boolean"
        }
      },
      "constraint": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      },
      "default": {
        "optional": true,
        "default": null,
        "validation": {
          "oneOfNodeTypes": [
            "TSType"
          ]
        }
      }
    }
  },
  "builderKeys": {
    "ArrayExpression": [
      "elements"
    ],
    "AssignmentExpression": [
      "operator",
      "left",
      "right"
    ],
    "BinaryExpression": [
      "operator",
      "left",
      "right"
    ],
    "InterpreterDirective": [
      "value"
    ],
    "Directive": [
      "value"
    ],
    "DirectiveLiteral": [
      "value"
    ],
    "BlockStatement": [
      "body",
      "directives"
    ],
    "BreakStatement": [
      "label"
    ],
    "CallExpression": [
      "callee",
      "arguments"
    ],
    "CatchClause": [
      "param",
      "body"
    ],
    "ConditionalExpression": [
      "test",
      "consequent",
      "alternate"
    ],
    "ContinueStatement": [
      "label"
    ],
    "DebuggerStatement": [],
    "DoWhileStatement": [
      "test",
      "body"
    ],
    "EmptyStatement": [],
    "ExpressionStatement": [
      "expression"
    ],
    "File": [
      "program",
      "comments",
      "tokens"
    ],
    "ForInStatement": [
      "left",
      "right",
      "body"
    ],
    "ForStatement": [
      "init",
      "test",
      "update",
      "body"
    ],
    "FunctionDeclaration": [
      "id",
      "params",
      "body",
      "generator",
      "async"
    ],
    "FunctionExpression": [
      "id",
      "params",
      "body",
      "generator",
      "async"
    ],
    "Identifier": [
      "name"
    ],
    "IfStatement": [
      "test",
      "consequent",
      "alternate"
    ],
    "LabeledStatement": [
      "label",
      "body"
    ],
    "StringLiteral": [
      "value"
    ],
    "NumericLiteral": [
      "value"
    ],
    "NullLiteral": [],
    "BooleanLiteral": [
      "value"
    ],
    "RegExpLiteral": [
      "pattern",
      "flags"
    ],
    "LogicalExpression": [
      "operator",
      "left",
      "right"
    ],
    "MemberExpression": [
      "object",
      "property",
      "computed",
      "optional"
    ],
    "NewExpression": [
      "callee",
      "arguments"
    ],
    "Program": [
      "body",
      "directives",
      "sourceType",
      "interpreter"
    ],
    "ObjectExpression": [
      "properties"
    ],
    "ObjectMethod": [
      "kind",
      "key",
      "params",
      "body",
      "computed",
      "generator",
      "async"
    ],
    "ObjectProperty": [
      "key",
      "value",
      "computed",
      "shorthand",
      "decorators"
    ],
    "RestElement": [
      "argument"
    ],
    "ReturnStatement": [
      "argument"
    ],
    "SequenceExpression": [
      "expressions"
    ],
    "ParenthesizedExpression": [
      "expression"
    ],
    "SwitchCase": [
      "test",
      "consequent"
    ],
    "SwitchStatement": [
      "discriminant",
      "cases"
    ],
    "ThisExpression": [],
    "ThrowStatement": [
      "argument"
    ],
    "TryStatement": [
      "block",
      "handler",
      "finalizer"
    ],
    "UnaryExpression": [
      "operator",
      "argument",
      "prefix"
    ],
    "UpdateExpression": [
      "operator",
      "argument",
      "prefix"
    ],
    "VariableDeclaration": [
      "kind",
      "declarations"
    ],
    "VariableDeclarator": [
      "id",
      "init"
    ],
    "WhileStatement": [
      "test",
      "body"
    ],
    "WithStatement": [
      "object",
      "body"
    ],
    "AssignmentPattern": [
      "left",
      "right"
    ],
    "ArrayPattern": [
      "elements"
    ],
    "ArrowFunctionExpression": [
      "params",
      "body",
      "async"
    ],
    "ClassBody": [
      "body"
    ],
    "ClassExpression": [
      "id",
      "superClass",
      "body",
      "decorators"
    ],
    "ClassDeclaration": [
      "id",
      "superClass",
      "body",
      "decorators"
    ],
    "ExportAllDeclaration": [
      "source"
    ],
    "ExportDefaultDeclaration": [
      "declaration"
    ],
    "ExportNamedDeclaration": [
      "declaration",
      "specifiers",
      "source"
    ],
    "ExportSpecifier": [
      "local",
      "exported"
    ],
    "ForOfStatement": [
      "left",
      "right",
      "body",
      "await"
    ],
    "ImportDeclaration": [
      "specifiers",
      "source"
    ],
    "ImportDefaultSpecifier": [
      "local"
    ],
    "ImportNamespaceSpecifier": [
      "local"
    ],
    "ImportSpecifier": [
      "local",
      "imported"
    ],
    "ImportExpression": [
      "source",
      "options"
    ],
    "MetaProperty": [
      "meta",
      "property"
    ],
    "ClassMethod": [
      "kind",
      "key",
      "params",
      "body",
      "computed",
      "static",
      "generator",
      "async"
    ],
    "ObjectPattern": [
      "properties"
    ],
    "SpreadElement": [
      "argument"
    ],
    "Super": [],
    "TaggedTemplateExpression": [
      "tag",
      "quasi"
    ],
    "TemplateElement": [
      "value",
      "tail"
    ],
    "TemplateLiteral": [
      "quasis",
      "expressions"
    ],
    "YieldExpression": [
      "argument",
      "delegate"
    ],
    "AwaitExpression": [
      "argument"
    ],
    "Import": [],
    "BigIntLiteral": [
      "value"
    ],
    "ExportNamespaceSpecifier": [
      "exported"
    ],
    "OptionalMemberExpression": [
      "object",
      "property",
      "computed",
      "optional"
    ],
    "OptionalCallExpression": [
      "callee",
      "arguments",
      "optional"
    ],
    "ClassProperty": [
      "key",
      "value",
      "typeAnnotation",
      "decorators",
      "computed",
      "static"
    ],
    "ClassAccessorProperty": [
      "key",
      "value",
      "typeAnnotation",
      "decorators",
      "computed",
      "static"
    ],
    "ClassPrivateProperty": [
      "key",
      "value",
      "decorators",
      "static"
    ],
    "ClassPrivateMethod": [
      "kind",
      "key",
      "params",
      "body",
      "static"
    ],
    "PrivateName": [
      "id"
    ],
    "StaticBlock": [
      "body"
    ],
    "ImportAttribute": [
      "key",
      "value"
    ],
    "AnyTypeAnnotation": [],
    "ArrayTypeAnnotation": [
      "elementType"
    ],
    "BooleanTypeAnnotation": [],
    "BooleanLiteralTypeAnnotation": [
      "value"
    ],
    "NullLiteralTypeAnnotation": [],
    "ClassImplements": [
      "id",
      "typeParameters"
    ],
    "DeclareClass": [
      "id",
      "typeParameters",
      "extends",
      "body"
    ],
    "DeclareFunction": [
      "id"
    ],
    "DeclareInterface": [
      "id",
      "typeParameters",
      "extends",
      "body"
    ],
    "DeclareModule": [
      "id",
      "body",
      "kind"
    ],
    "DeclareModuleExports": [
      "typeAnnotation"
    ],
    "DeclareTypeAlias": [
      "id",
      "typeParameters",
      "right"
    ],
    "DeclareOpaqueType": [
      "id",
      "typeParameters",
      "supertype"
    ],
    "DeclareVariable": [
      "id"
    ],
    "DeclareExportDeclaration": [
      "declaration",
      "specifiers",
      "source",
      "attributes"
    ],
    "DeclareExportAllDeclaration": [
      "source",
      "attributes"
    ],
    "DeclaredPredicate": [
      "value"
    ],
    "ExistsTypeAnnotation": [],
    "FunctionTypeAnnotation": [
      "typeParameters",
      "params",
      "rest",
      "returnType"
    ],
    "FunctionTypeParam": [
      "name",
      "typeAnnotation"
    ],
    "GenericTypeAnnotation": [
      "id",
      "typeParameters"
    ],
    "InferredPredicate": [],
    "InterfaceExtends": [
      "id",
      "typeParameters"
    ],
    "InterfaceDeclaration": [
      "id",
      "typeParameters",
      "extends",
      "body"
    ],
    "InterfaceTypeAnnotation": [
      "extends",
      "body"
    ],
    "IntersectionTypeAnnotation": [
      "types"
    ],
    "MixedTypeAnnotation": [],
    "EmptyTypeAnnotation": [],
    "NullableTypeAnnotation": [
      "typeAnnotation"
    ],
    "NumberLiteralTypeAnnotation": [
      "value"
    ],
    "NumberTypeAnnotation": [],
    "ObjectTypeAnnotation": [
      "properties",
      "indexers",
      "callProperties",
      "internalSlots",
      "exact"
    ],
    "ObjectTypeInternalSlot": [
      "id",
      "value",
      "optional",
      "static",
      "method"
    ],
    "ObjectTypeCallProperty": [
      "value"
    ],
    "ObjectTypeIndexer": [
      "id",
      "key",
      "value",
      "variance"
    ],
    "ObjectTypeProperty": [
      "key",
      "value",
      "variance"
    ],
    "ObjectTypeSpreadProperty": [
      "argument"
    ],
    "OpaqueType": [
      "id",
      "typeParameters",
      "supertype",
      "impltype"
    ],
    "QualifiedTypeIdentifier": [
      "id",
      "qualification"
    ],
    "StringLiteralTypeAnnotation": [
      "value"
    ],
    "StringTypeAnnotation": [],
    "SymbolTypeAnnotation": [],
    "ThisTypeAnnotation": [],
    "TupleTypeAnnotation": [
      "types"
    ],
    "TypeofTypeAnnotation": [
      "argument"
    ],
    "TypeAlias": [
      "id",
      "typeParameters",
      "right"
    ],
    "TypeAnnotation": [
      "typeAnnotation"
    ],
    "TypeCastExpression": [
      "expression",
      "typeAnnotation"
    ],
    "TypeParameter": [
      "bound",
      "default",
      "variance"
    ],
    "TypeParameterDeclaration": [
      "params"
    ],
    "TypeParameterInstantiation": [
      "params"
    ],
    "UnionTypeAnnotation": [
      "types"
    ],
    "Variance": [
      "kind"
    ],
    "VoidTypeAnnotation": [],
    "EnumDeclaration": [
      "id",
      "body"
    ],
    "EnumBooleanBody": [
      "members"
    ],
    "EnumNumberBody": [
      "members"
    ],
    "EnumStringBody": [
      "members"
    ],
    "EnumSymbolBody": [
      "members"
    ],
    "EnumBooleanMember": [
      "id"
    ],
    "EnumNumberMember": [
      "id",
      "init"
    ],
    "EnumStringMember": [
      "id",
      "init"
    ],
    "EnumDefaultedMember": [
      "id"
    ],
    "IndexedAccessType": [
      "objectType",
      "indexType"
    ],
    "OptionalIndexedAccessType": [
      "objectType",
      "indexType"
    ],
    "JSXAttribute": [
      "name",
      "value"
    ],
    "JSXClosingElement": [
      "name"
    ],
    "JSXElement": [
      "openingElement",
      "closingElement",
      "children",
      "selfClosing"
    ],
    "JSXEmptyExpression": [],
    "JSXExpressionContainer": [
      "expression"
    ],
    "JSXSpreadChild": [
      "expression"
    ],
    "JSXIdentifier": [
      "name"
    ],
    "JSXMemberExpression": [
      "object",
      "property"
    ],
    "JSXNamespacedName": [
      "namespace",
      "name"
    ],
    "JSXOpeningElement": [
      "name",
      "attributes",
      "selfClosing"
    ],
    "JSXSpreadAttribute": [
      "argument"
    ],
    "JSXText": [
      "value"
    ],
    "JSXFragment": [
      "openingFragment",
      "closingFragment",
      "children"
    ],
    "JSXOpeningFragment": [],
    "JSXClosingFragment": [],
    "Noop": [],
    "Placeholder": [
      "expectedNode",
      "name"
    ],
    "V8IntrinsicIdentifier": [
      "name"
    ],
    "ArgumentPlaceholder": [],
    "BindExpression": [
      "object",
      "callee"
    ],
    "Decorator": [
      "expression"
    ],
    "DoExpression": [
      "body",
      "async"
    ],
    "ExportDefaultSpecifier": [
      "exported"
    ],
    "RecordExpression": [
      "properties"
    ],
    "TupleExpression": [
      "elements"
    ],
    "DecimalLiteral": [
      "value"
    ],
    "ModuleExpression": [
      "body"
    ],
    "TopicReference": [],
    "PipelineTopicExpression": [
      "expression"
    ],
    "PipelineBareFunction": [
      "callee"
    ],
    "PipelinePrimaryTopicReference": [],
    "VoidPattern": [],
    "TSParameterProperty": [
      "parameter"
    ],
    "TSDeclareFunction": [
      "id",
      "typeParameters",
      "params",
      "returnType"
    ],
    "TSDeclareMethod": [
      "decorators",
      "key",
      "typeParameters",
      "params",
      "returnType"
    ],
    "TSQualifiedName": [
      "left",
      "right"
    ],
    "TSCallSignatureDeclaration": [
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSConstructSignatureDeclaration": [
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSPropertySignature": [
      "key",
      "typeAnnotation"
    ],
    "TSMethodSignature": [
      "key",
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSIndexSignature": [
      "parameters",
      "typeAnnotation"
    ],
    "TSAnyKeyword": [],
    "TSBooleanKeyword": [],
    "TSBigIntKeyword": [],
    "TSIntrinsicKeyword": [],
    "TSNeverKeyword": [],
    "TSNullKeyword": [],
    "TSNumberKeyword": [],
    "TSObjectKeyword": [],
    "TSStringKeyword": [],
    "TSSymbolKeyword": [],
    "TSUndefinedKeyword": [],
    "TSUnknownKeyword": [],
    "TSVoidKeyword": [],
    "TSThisType": [],
    "TSFunctionType": [
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSConstructorType": [
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSTypeReference": [
      "typeName",
      "typeParameters"
    ],
    "TSTypePredicate": [
      "parameterName",
      "typeAnnotation",
      "asserts"
    ],
    "TSTypeQuery": [
      "exprName",
      "typeParameters"
    ],
    "TSTypeLiteral": [
      "members"
    ],
    "TSArrayType": [
      "elementType"
    ],
    "TSTupleType": [
      "elementTypes"
    ],
    "TSOptionalType": [
      "typeAnnotation"
    ],
    "TSRestType": [
      "typeAnnotation"
    ],
    "TSNamedTupleMember": [
      "label",
      "elementType",
      "optional"
    ],
    "TSUnionType": [
      "types"
    ],
    "TSIntersectionType": [
      "types"
    ],
    "TSConditionalType": [
      "checkType",
      "extendsType",
      "trueType",
      "falseType"
    ],
    "TSInferType": [
      "typeParameter"
    ],
    "TSParenthesizedType": [
      "typeAnnotation"
    ],
    "TSTypeOperator": [
      "typeAnnotation",
      "operator"
    ],
    "TSIndexedAccessType": [
      "objectType",
      "indexType"
    ],
    "TSMappedType": [
      "typeParameter",
      "typeAnnotation",
      "nameType"
    ],
    "TSTemplateLiteralType": [
      "quasis",
      "types"
    ],
    "TSLiteralType": [
      "literal"
    ],
    "TSExpressionWithTypeArguments": [
      "expression",
      "typeParameters"
    ],
    "TSInterfaceDeclaration": [
      "id",
      "typeParameters",
      "extends",
      "body"
    ],
    "TSInterfaceBody": [
      "body"
    ],
    "TSTypeAliasDeclaration": [
      "id",
      "typeParameters",
      "typeAnnotation"
    ],
    "TSInstantiationExpression": [
      "expression",
      "typeParameters"
    ],
    "TSAsExpression": [
      "expression",
      "typeAnnotation"
    ],
    "TSSatisfiesExpression": [
      "expression",
      "typeAnnotation"
    ],
    "TSTypeAssertion": [
      "typeAnnotation",
      "expression"
    ],
    "TSEnumBody": [
      "members"
    ],
    "TSEnumDeclaration": [
      "id",
      "members"
    ],
    "TSEnumMember": [
      "id",
      "initializer"
    ],
    "TSModuleDeclaration": [
      "id",
      "body"
    ],
    "TSModuleBlock": [
      "body"
    ],
    "TSImportType": [
      "argument",
      "qualifier",
      "typeParameters"
    ],
    "TSImportEqualsDeclaration": [
      "id",
      "moduleReference"
    ],
    "TSExternalModuleReference": [
      "expression"
    ],
    "TSNonNullExpression": [
      "expression"
    ],
    "TSExportAssignment": [
      "expression"
    ],
    "TSNamespaceExportDeclaration": [
      "id"
    ],
    "TSTypeAnnotation": [
      "typeAnnotation"
    ],
    "TSTypeParameterInstantiation": [
      "params"
    ],
    "TSTypeParameterDeclaration": [
      "params"
    ],
    "TSTypeParameter": [
      "constraint",
      "default",
      "name"
    ]
  },
  "visitorKeys": {
    "ArrayExpression": [
      "elements"
    ],
    "AssignmentExpression": [
      "left",
      "right"
    ],
    "BinaryExpression": [
      "left",
      "right"
    ],
    "InterpreterDirective": [],
    "Directive": [
      "value"
    ],
    "DirectiveLiteral": [],
    "BlockStatement": [
      "directives",
      "body"
    ],
    "BreakStatement": [
      "label"
    ],
    "CallExpression": [
      "callee",
      "typeParameters",
      "typeArguments",
      "arguments"
    ],
    "CatchClause": [
      "param",
      "body"
    ],
    "ConditionalExpression": [
      "test",
      "consequent",
      "alternate"
    ],
    "ContinueStatement": [
      "label"
    ],
    "DebuggerStatement": [],
    "DoWhileStatement": [
      "body",
      "test"
    ],
    "EmptyStatement": [],
    "ExpressionStatement": [
      "expression"
    ],
    "File": [
      "program"
    ],
    "ForInStatement": [
      "left",
      "right",
      "body"
    ],
    "ForStatement": [
      "init",
      "test",
      "update",
      "body"
    ],
    "FunctionDeclaration": [
      "id",
      "typeParameters",
      "params",
      "predicate",
      "returnType",
      "body"
    ],
    "FunctionExpression": [
      "id",
      "typeParameters",
      "params",
      "predicate",
      "returnType",
      "body"
    ],
    "Identifier": [
      "typeAnnotation",
      "decorators"
    ],
    "IfStatement": [
      "test",
      "consequent",
      "alternate"
    ],
    "LabeledStatement": [
      "label",
      "body"
    ],
    "StringLiteral": [],
    "NumericLiteral": [],
    "NullLiteral": [],
    "BooleanLiteral": [],
    "RegExpLiteral": [],
    "LogicalExpression": [
      "left",
      "right"
    ],
    "MemberExpression": [
      "object",
      "property"
    ],
    "NewExpression": [
      "callee",
      "typeParameters",
      "typeArguments",
      "arguments"
    ],
    "Program": [
      "directives",
      "body"
    ],
    "ObjectExpression": [
      "properties"
    ],
    "ObjectMethod": [
      "decorators",
      "key",
      "typeParameters",
      "params",
      "returnType",
      "body"
    ],
    "ObjectProperty": [
      "decorators",
      "key",
      "value"
    ],
    "RestElement": [
      "argument",
      "typeAnnotation"
    ],
    "ReturnStatement": [
      "argument"
    ],
    "SequenceExpression": [
      "expressions"
    ],
    "ParenthesizedExpression": [
      "expression"
    ],
    "SwitchCase": [
      "test",
      "consequent"
    ],
    "SwitchStatement": [
      "discriminant",
      "cases"
    ],
    "ThisExpression": [],
    "ThrowStatement": [
      "argument"
    ],
    "TryStatement": [
      "block",
      "handler",
      "finalizer"
    ],
    "UnaryExpression": [
      "argument"
    ],
    "UpdateExpression": [
      "argument"
    ],
    "VariableDeclaration": [
      "declarations"
    ],
    "VariableDeclarator": [
      "id",
      "init"
    ],
    "WhileStatement": [
      "test",
      "body"
    ],
    "WithStatement": [
      "object",
      "body"
    ],
    "AssignmentPattern": [
      "left",
      "right",
      "decorators"
    ],
    "ArrayPattern": [
      "elements",
      "typeAnnotation"
    ],
    "ArrowFunctionExpression": [
      "typeParameters",
      "params",
      "predicate",
      "returnType",
      "body"
    ],
    "ClassBody": [
      "body"
    ],
    "ClassExpression": [
      "decorators",
      "id",
      "typeParameters",
      "superClass",
      "superTypeParameters",
      "mixins",
      "implements",
      "body"
    ],
    "ClassDeclaration": [
      "decorators",
      "id",
      "typeParameters",
      "superClass",
      "superTypeParameters",
      "mixins",
      "implements",
      "body"
    ],
    "ExportAllDeclaration": [
      "source",
      "attributes",
      "assertions"
    ],
    "ExportDefaultDeclaration": [
      "declaration"
    ],
    "ExportNamedDeclaration": [
      "declaration",
      "specifiers",
      "source",
      "attributes",
      "assertions"
    ],
    "ExportSpecifier": [
      "local",
      "exported"
    ],
    "ForOfStatement": [
      "left",
      "right",
      "body"
    ],
    "ImportDeclaration": [
      "specifiers",
      "source",
      "attributes",
      "assertions"
    ],
    "ImportDefaultSpecifier": [
      "local"
    ],
    "ImportNamespaceSpecifier": [
      "local"
    ],
    "ImportSpecifier": [
      "imported",
      "local"
    ],
    "ImportExpression": [
      "source",
      "options"
    ],
    "MetaProperty": [
      "meta",
      "property"
    ],
    "ClassMethod": [
      "decorators",
      "key",
      "typeParameters",
      "params",
      "returnType",
      "body"
    ],
    "ObjectPattern": [
      "decorators",
      "properties",
      "typeAnnotation"
    ],
    "SpreadElement": [
      "argument"
    ],
    "Super": [],
    "TaggedTemplateExpression": [
      "tag",
      "typeParameters",
      "quasi"
    ],
    "TemplateElement": [],
    "TemplateLiteral": [
      "quasis",
      "expressions"
    ],
    "YieldExpression": [
      "argument"
    ],
    "AwaitExpression": [
      "argument"
    ],
    "Import": [],
    "BigIntLiteral": [],
    "ExportNamespaceSpecifier": [
      "exported"
    ],
    "OptionalMemberExpression": [
      "object",
      "property"
    ],
    "OptionalCallExpression": [
      "callee",
      "typeParameters",
      "typeArguments",
      "arguments"
    ],
    "ClassProperty": [
      "decorators",
      "variance",
      "key",
      "typeAnnotation",
      "value"
    ],
    "ClassAccessorProperty": [
      "decorators",
      "key",
      "typeAnnotation",
      "value"
    ],
    "ClassPrivateProperty": [
      "decorators",
      "variance",
      "key",
      "typeAnnotation",
      "value"
    ],
    "ClassPrivateMethod": [
      "decorators",
      "key",
      "typeParameters",
      "params",
      "returnType",
      "body"
    ],
    "PrivateName": [
      "id"
    ],
    "StaticBlock": [
      "body"
    ],
    "ImportAttribute": [
      "key",
      "value"
    ],
    "AnyTypeAnnotation": [],
    "ArrayTypeAnnotation": [
      "elementType"
    ],
    "BooleanTypeAnnotation": [],
    "BooleanLiteralTypeAnnotation": [],
    "NullLiteralTypeAnnotation": [],
    "ClassImplements": [
      "id",
      "typeParameters"
    ],
    "DeclareClass": [
      "id",
      "typeParameters",
      "extends",
      "mixins",
      "implements",
      "body"
    ],
    "DeclareFunction": [
      "id",
      "predicate"
    ],
    "DeclareInterface": [
      "id",
      "typeParameters",
      "extends",
      "body"
    ],
    "DeclareModule": [
      "id",
      "body"
    ],
    "DeclareModuleExports": [
      "typeAnnotation"
    ],
    "DeclareTypeAlias": [
      "id",
      "typeParameters",
      "right"
    ],
    "DeclareOpaqueType": [
      "id",
      "typeParameters",
      "supertype"
    ],
    "DeclareVariable": [
      "id"
    ],
    "DeclareExportDeclaration": [
      "declaration",
      "specifiers",
      "source",
      "attributes"
    ],
    "DeclareExportAllDeclaration": [
      "source",
      "attributes"
    ],
    "DeclaredPredicate": [
      "value"
    ],
    "ExistsTypeAnnotation": [],
    "FunctionTypeAnnotation": [
      "typeParameters",
      "this",
      "params",
      "rest",
      "returnType"
    ],
    "FunctionTypeParam": [
      "name",
      "typeAnnotation"
    ],
    "GenericTypeAnnotation": [
      "id",
      "typeParameters"
    ],
    "InferredPredicate": [],
    "InterfaceExtends": [
      "id",
      "typeParameters"
    ],
    "InterfaceDeclaration": [
      "id",
      "typeParameters",
      "extends",
      "body"
    ],
    "InterfaceTypeAnnotation": [
      "extends",
      "body"
    ],
    "IntersectionTypeAnnotation": [
      "types"
    ],
    "MixedTypeAnnotation": [],
    "EmptyTypeAnnotation": [],
    "NullableTypeAnnotation": [
      "typeAnnotation"
    ],
    "NumberLiteralTypeAnnotation": [],
    "NumberTypeAnnotation": [],
    "ObjectTypeAnnotation": [
      "properties",
      "indexers",
      "callProperties",
      "internalSlots"
    ],
    "ObjectTypeInternalSlot": [
      "id",
      "value"
    ],
    "ObjectTypeCallProperty": [
      "value"
    ],
    "ObjectTypeIndexer": [
      "variance",
      "id",
      "key",
      "value"
    ],
    "ObjectTypeProperty": [
      "key",
      "value",
      "variance"
    ],
    "ObjectTypeSpreadProperty": [
      "argument"
    ],
    "OpaqueType": [
      "id",
      "typeParameters",
      "supertype",
      "impltype"
    ],
    "QualifiedTypeIdentifier": [
      "qualification",
      "id"
    ],
    "StringLiteralTypeAnnotation": [],
    "StringTypeAnnotation": [],
    "SymbolTypeAnnotation": [],
    "ThisTypeAnnotation": [],
    "TupleTypeAnnotation": [
      "types"
    ],
    "TypeofTypeAnnotation": [
      "argument"
    ],
    "TypeAlias": [
      "id",
      "typeParameters",
      "right"
    ],
    "TypeAnnotation": [
      "typeAnnotation"
    ],
    "TypeCastExpression": [
      "expression",
      "typeAnnotation"
    ],
    "TypeParameter": [
      "bound",
      "default",
      "variance"
    ],
    "TypeParameterDeclaration": [
      "params"
    ],
    "TypeParameterInstantiation": [
      "params"
    ],
    "UnionTypeAnnotation": [
      "types"
    ],
    "Variance": [],
    "VoidTypeAnnotation": [],
    "EnumDeclaration": [
      "id",
      "body"
    ],
    "EnumBooleanBody": [
      "members"
    ],
    "EnumNumberBody": [
      "members"
    ],
    "EnumStringBody": [
      "members"
    ],
    "EnumSymbolBody": [
      "members"
    ],
    "EnumBooleanMember": [
      "id",
      "init"
    ],
    "EnumNumberMember": [
      "id",
      "init"
    ],
    "EnumStringMember": [
      "id",
      "init"
    ],
    "EnumDefaultedMember": [
      "id"
    ],
    "IndexedAccessType": [
      "objectType",
      "indexType"
    ],
    "OptionalIndexedAccessType": [
      "objectType",
      "indexType"
    ],
    "JSXAttribute": [
      "name",
      "value"
    ],
    "JSXClosingElement": [
      "name"
    ],
    "JSXElement": [
      "openingElement",
      "children",
      "closingElement"
    ],
    "JSXEmptyExpression": [],
    "JSXExpressionContainer": [
      "expression"
    ],
    "JSXSpreadChild": [
      "expression"
    ],
    "JSXIdentifier": [],
    "JSXMemberExpression": [
      "object",
      "property"
    ],
    "JSXNamespacedName": [
      "namespace",
      "name"
    ],
    "JSXOpeningElement": [
      "name",
      "typeParameters",
      "typeArguments",
      "attributes"
    ],
    "JSXSpreadAttribute": [
      "argument"
    ],
    "JSXText": [],
    "JSXFragment": [
      "openingFragment",
      "children",
      "closingFragment"
    ],
    "JSXOpeningFragment": [],
    "JSXClosingFragment": [],
    "Noop": [],
    "Placeholder": [],
    "V8IntrinsicIdentifier": [],
    "ArgumentPlaceholder": [],
    "BindExpression": [
      "object",
      "callee"
    ],
    "Decorator": [
      "expression"
    ],
    "DoExpression": [
      "body"
    ],
    "ExportDefaultSpecifier": [
      "exported"
    ],
    "RecordExpression": [
      "properties"
    ],
    "TupleExpression": [
      "elements"
    ],
    "DecimalLiteral": [],
    "ModuleExpression": [
      "body"
    ],
    "TopicReference": [],
    "PipelineTopicExpression": [
      "expression"
    ],
    "PipelineBareFunction": [
      "callee"
    ],
    "PipelinePrimaryTopicReference": [],
    "VoidPattern": [],
    "TSParameterProperty": [
      "parameter"
    ],
    "TSDeclareFunction": [
      "id",
      "typeParameters",
      "params",
      "returnType"
    ],
    "TSDeclareMethod": [
      "decorators",
      "key",
      "typeParameters",
      "params",
      "returnType"
    ],
    "TSQualifiedName": [
      "left",
      "right"
    ],
    "TSCallSignatureDeclaration": [
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSConstructSignatureDeclaration": [
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSPropertySignature": [
      "key",
      "typeAnnotation"
    ],
    "TSMethodSignature": [
      "key",
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSIndexSignature": [
      "parameters",
      "typeAnnotation"
    ],
    "TSAnyKeyword": [],
    "TSBooleanKeyword": [],
    "TSBigIntKeyword": [],
    "TSIntrinsicKeyword": [],
    "TSNeverKeyword": [],
    "TSNullKeyword": [],
    "TSNumberKeyword": [],
    "TSObjectKeyword": [],
    "TSStringKeyword": [],
    "TSSymbolKeyword": [],
    "TSUndefinedKeyword": [],
    "TSUnknownKeyword": [],
    "TSVoidKeyword": [],
    "TSThisType": [],
    "TSFunctionType": [
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSConstructorType": [
      "typeParameters",
      "parameters",
      "typeAnnotation"
    ],
    "TSTypeReference": [
      "typeName",
      "typeParameters"
    ],
    "TSTypePredicate": [
      "parameterName",
      "typeAnnotation"
    ],
    "TSTypeQuery": [
      "exprName",
      "typeParameters"
    ],
    "TSTypeLiteral": [
      "members"
    ],
    "TSArrayType": [
      "elementType"
    ],
    "TSTupleType": [
      "elementTypes"
    ],
    "TSOptionalType": [
      "typeAnnotation"
    ],
    "TSRestType": [
      "typeAnnotation"
    ],
    "TSNamedTupleMember": [
      "label",
      "elementType"
    ],
    "TSUnionType": [
      "types"
    ],
    "TSIntersectionType": [
      "types"
    ],
    "TSConditionalType": [
      "checkType",
      "extendsType",
      "trueType",
      "falseType"
    ],
    "TSInferType": [
      "typeParameter"
    ],
    "TSParenthesizedType": [
      "typeAnnotation"
    ],
    "TSTypeOperator": [
      "typeAnnotation"
    ],
    "TSIndexedAccessType": [
      "objectType",
      "indexType"
    ],
    "TSMappedType": [
      "typeParameter",
      "nameType",
      "typeAnnotation"
    ],
    "TSTemplateLiteralType": [
      "quasis",
      "types"
    ],
    "TSLiteralType": [
      "literal"
    ],
    "TSExpressionWithTypeArguments": [
      "expression",
      "typeParameters"
    ],
    "TSInterfaceDeclaration": [
      "id",
      "typeParameters",
      "extends",
      "body"
    ],
    "TSInterfaceBody": [
      "body"
    ],
    "TSTypeAliasDeclaration": [
      "id",
      "typeParameters",
      "typeAnnotation"
    ],
    "TSInstantiationExpression": [
      "expression",
      "typeParameters"
    ],
    "TSAsExpression": [
      "expression",
      "typeAnnotation"
    ],
    "TSSatisfiesExpression": [
      "expression",
      "typeAnnotation"
    ],
    "TSTypeAssertion": [
      "typeAnnotation",
      "expression"
    ],
    "TSEnumBody": [
      "members"
    ],
    "TSEnumDeclaration": [
      "id",
      "members"
    ],
    "TSEnumMember": [
      "id",
      "initializer"
    ],
    "TSModuleDeclaration": [
      "id",
      "body"
    ],
    "TSModuleBlock": [
      "body"
    ],
    "TSImportType": [
      "argument",
      "options",
      "qualifier",
      "typeParameters"
    ],
    "TSImportEqualsDeclaration": [
      "id",
      "moduleReference"
    ],
    "TSExternalModuleReference": [
      "expression"
    ],
    "TSNonNullExpression": [
      "expression"
    ],
    "TSExportAssignment": [
      "expression"
    ],
    "TSNamespaceExportDeclaration": [
      "id"
    ],
    "TSTypeAnnotation": [
      "typeAnnotation"
    ],
    "TSTypeParameterInstantiation": [
      "params"
    ],
    "TSTypeParameterDeclaration": [
      "params"
    ],
    "TSTypeParameter": [
      "constraint",
      "default"
    ]
  },
  "aliasKeys": {
    "ArrayExpression": [
      "Standardized",
      "Expression"
    ],
    "AssignmentExpression": [
      "Standardized",
      "Expression"
    ],
    "BinaryExpression": [
      "Standardized",
      "Binary",
      "Expression"
    ],
    "InterpreterDirective": [
      "Standardized"
    ],
    "Directive": [
      "Standardized"
    ],
    "DirectiveLiteral": [
      "Standardized"
    ],
    "BlockStatement": [
      "Standardized",
      "Scopable",
      "BlockParent",
      "Block",
      "Statement"
    ],
    "BreakStatement": [
      "Standardized",
      "Statement",
      "Terminatorless",
      "CompletionStatement"
    ],
    "CallExpression": [
      "Standardized",
      "Expression"
    ],
    "CatchClause": [
      "Standardized",
      "Scopable",
      "BlockParent"
    ],
    "ConditionalExpression": [
      "Standardized",
      "Expression",
      "Conditional"
    ],
    "ContinueStatement": [
      "Standardized",
      "Statement",
      "Terminatorless",
      "CompletionStatement"
    ],
    "DebuggerStatement": [
      "Standardized",
      "Statement"
    ],
    "DoWhileStatement": [
      "Standardized",
      "Statement",
      "BlockParent",
      "Loop",
      "While",
      "Scopable"
    ],
    "EmptyStatement": [
      "Standardized",
      "Statement"
    ],
    "ExpressionStatement": [
      "Standardized",
      "Statement",
      "ExpressionWrapper"
    ],
    "File": [
      "Standardized"
    ],
    "ForInStatement": [
      "Standardized",
      "Scopable",
      "Statement",
      "For",
      "BlockParent",
      "Loop",
      "ForXStatement"
    ],
    "ForStatement": [
      "Standardized",
      "Scopable",
      "Statement",
      "For",
      "BlockParent",
      "Loop"
    ],
    "FunctionDeclaration": [
      "Standardized",
      "Scopable",
      "Function",
      "BlockParent",
      "FunctionParent",
      "Statement",
      "Pureish",
      "Declaration"
    ],
    "FunctionExpression": [
      "Standardized",
      "Scopable",
      "Function",
      "BlockParent",
      "FunctionParent",
      "Expression",
      "Pureish"
    ],
    "Identifier": [
      "Standardized",
      "Expression",
      "FunctionParameter",
      "PatternLike",
      "LVal",
      "TSEntityName"
    ],
    "IfStatement": [
      "Standardized",
      "Statement",
      "Conditional"
    ],
    "LabeledStatement": [
      "Standardized",
      "Statement"
    ],
    "StringLiteral": [
      "Standardized",
      "Expression",
      "Pureish",
      "Literal",
      "Immutable"
    ],
    "NumericLiteral": [
      "Standardized",
      "Expression",
      "Pureish",
      "Literal",
      "Immutable"
    ],
    "NullLiteral": [
      "Standardized",
      "Expression",
      "Pureish",
      "Literal",
      "Immutable"
    ],
    "BooleanLiteral": [
      "Standardized",
      "Expression",
      "Pureish",
      "Literal",
      "Immutable"
    ],
    "RegExpLiteral": [
      "Standardized",
      "Expression",
      "Pureish",
      "Literal"
    ],
    "LogicalExpression": [
      "Standardized",
      "Binary",
      "Expression"
    ],
    "MemberExpression": [
      "Standardized",
      "Expression",
      "LVal",
      "PatternLike"
    ],
    "NewExpression": [
      "Standardized",
      "Expression"
    ],
    "Program": [
      "Standardized",
      "Scopable",
      "BlockParent",
      "Block"
    ],
    "ObjectExpression": [
      "Standardized",
      "Expression"
    ],
    "ObjectMethod": [
      "Standardized",
      "UserWhitespacable",
      "Function",
      "Scopable",
      "BlockParent",
      "FunctionParent",
      "Method",
      "ObjectMember"
    ],
    "ObjectProperty": [
      "Standardized",
      "UserWhitespacable",
      "Property",
      "ObjectMember"
    ],
    "RestElement": [
      "Standardized",
      "FunctionParameter",
      "PatternLike",
      "LVal"
    ],
    "ReturnStatement": [
      "Standardized",
      "Statement",
      "Terminatorless",
      "CompletionStatement"
    ],
    "SequenceExpression": [
      "Standardized",
      "Expression"
    ],
    "ParenthesizedExpression": [
      "Standardized",
      "Expression",
      "ExpressionWrapper"
    ],
    "SwitchCase": [
      "Standardized"
    ],
    "SwitchStatement": [
      "Standardized",
      "Statement",
      "BlockParent",
      "Scopable"
    ],
    "ThisExpression": [
      "Standardized",
      "Expression"
    ],
    "ThrowStatement": [
      "Standardized",
      "Statement",
      "Terminatorless",
      "CompletionStatement"
    ],
    "TryStatement": [
      "Standardized",
      "Statement"
    ],
    "UnaryExpression": [
      "Standardized",
      "UnaryLike",
      "Expression"
    ],
    "UpdateExpression": [
      "Standardized",
      "Expression"
    ],
    "VariableDeclaration": [
      "Standardized",
      "Statement",
      "Declaration"
    ],
    "VariableDeclarator": [
      "Standardized"
    ],
    "WhileStatement": [
      "Standardized",
      "Statement",
      "BlockParent",
      "Loop",
      "While",
      "Scopable"
    ],
    "WithStatement": [
      "Standardized",
      "Statement"
    ],
    "AssignmentPattern": [
      "Standardized",
      "FunctionParameter",
      "Pattern",
      "PatternLike",
      "LVal"
    ],
    "ArrayPattern": [
      "Standardized",
      "FunctionParameter",
      "Pattern",
      "PatternLike",
      "LVal"
    ],
    "ArrowFunctionExpression": [
      "Standardized",
      "Scopable",
      "Function",
      "BlockParent",
      "FunctionParent",
      "Expression",
      "Pureish"
    ],
    "ClassBody": [
      "Standardized"
    ],
    "ClassExpression": [
      "Standardized",
      "Scopable",
      "Class",
      "Expression"
    ],
    "ClassDeclaration": [
      "Standardized",
      "Scopable",
      "Class",
      "Statement",
      "Declaration"
    ],
    "ExportAllDeclaration": [
      "Standardized",
      "Statement",
      "Declaration",
      "ImportOrExportDeclaration",
      "ExportDeclaration"
    ],
    "ExportDefaultDeclaration": [
      "Standardized",
      "Statement",
      "Declaration",
      "ImportOrExportDeclaration",
      "ExportDeclaration"
    ],
    "ExportNamedDeclaration": [
      "Standardized",
      "Statement",
      "Declaration",
      "ImportOrExportDeclaration",
      "ExportDeclaration"
    ],
    "ExportSpecifier": [
      "Standardized",
      "ModuleSpecifier"
    ],
    "ForOfStatement": [
      "Standardized",
      "Scopable",
      "Statement",
      "For",
      "BlockParent",
      "Loop",
      "ForXStatement"
    ],
    "ImportDeclaration": [
      "Standardized",
      "Statement",
      "Declaration",
      "ImportOrExportDeclaration"
    ],
    "ImportDefaultSpecifier": [
      "Standardized",
      "ModuleSpecifier"
    ],
    "ImportNamespaceSpecifier": [
      "Standardized",
      "ModuleSpecifier"
    ],
    "ImportSpecifier": [
      "Standardized",
      "ModuleSpecifier"
    ],
    "ImportExpression": [
      "Standardized",
      "Expression"
    ],
    "MetaProperty": [
      "Standardized",
      "Expression"
    ],
    "ClassMethod": [
      "Standardized",
      "Function",
      "Scopable",
      "BlockParent",
      "FunctionParent",
      "Method"
    ],
    "ObjectPattern": [
      "Standardized",
      "FunctionParameter",
      "Pattern",
      "PatternLike",
      "LVal"
    ],
    "SpreadElement": [
      "Standardized",
      "UnaryLike"
    ],
    "Super": [
      "Standardized",
      "Expression"
    ],
    "TaggedTemplateExpression": [
      "Standardized",
      "Expression"
    ],
    "TemplateElement": [
      "Standardized"
    ],
    "TemplateLiteral": [
      "Standardized",
      "Expression",
      "Literal"
    ],
    "YieldExpression": [
      "Standardized",
      "Expression",
      "Terminatorless"
    ],
    "AwaitExpression": [
      "Standardized",
      "Expression",
      "Terminatorless"
    ],
    "Import": [
      "Standardized",
      "Expression"
    ],
    "BigIntLiteral": [
      "Standardized",
      "Expression",
      "Pureish",
      "Literal",
      "Immutable"
    ],
    "ExportNamespaceSpecifier": [
      "Standardized",
      "ModuleSpecifier"
    ],
    "OptionalMemberExpression": [
      "Standardized",
      "Expression"
    ],
    "OptionalCallExpression": [
      "Standardized",
      "Expression"
    ],
    "ClassProperty": [
      "Standardized",
      "Property"
    ],
    "ClassAccessorProperty": [
      "Standardized",
      "Property",
      "Accessor"
    ],
    "ClassPrivateProperty": [
      "Standardized",
      "Property",
      "Private"
    ],
    "ClassPrivateMethod": [
      "Standardized",
      "Function",
      "Scopable",
      "BlockParent",
      "FunctionParent",
      "Method",
      "Private"
    ],
    "PrivateName": [
      "Standardized",
      "Private"
    ],
    "StaticBlock": [
      "Standardized",
      "Scopable",
      "BlockParent",
      "FunctionParent"
    ],
    "ImportAttribute": [
      "Standardized"
    ],
    "AnyTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "ArrayTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "BooleanTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "BooleanLiteralTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "NullLiteralTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "ClassImplements": [
      "Flow"
    ],
    "DeclareClass": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclareFunction": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclareInterface": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclareModule": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclareModuleExports": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclareTypeAlias": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclareOpaqueType": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclareVariable": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclareExportDeclaration": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclareExportAllDeclaration": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "DeclaredPredicate": [
      "Flow",
      "FlowPredicate"
    ],
    "ExistsTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "FunctionTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "FunctionTypeParam": [
      "Flow"
    ],
    "GenericTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "InferredPredicate": [
      "Flow",
      "FlowPredicate"
    ],
    "InterfaceExtends": [
      "Flow"
    ],
    "InterfaceDeclaration": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "InterfaceTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "IntersectionTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "MixedTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "EmptyTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "NullableTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "NumberLiteralTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "NumberTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "ObjectTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "ObjectTypeInternalSlot": [
      "Flow",
      "UserWhitespacable"
    ],
    "ObjectTypeCallProperty": [
      "Flow",
      "UserWhitespacable"
    ],
    "ObjectTypeIndexer": [
      "Flow",
      "UserWhitespacable"
    ],
    "ObjectTypeProperty": [
      "Flow",
      "UserWhitespacable"
    ],
    "ObjectTypeSpreadProperty": [
      "Flow",
      "UserWhitespacable"
    ],
    "OpaqueType": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "QualifiedTypeIdentifier": [
      "Flow"
    ],
    "StringLiteralTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "StringTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "SymbolTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "ThisTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "TupleTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "TypeofTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "TypeAlias": [
      "Flow",
      "FlowDeclaration",
      "Statement",
      "Declaration"
    ],
    "TypeAnnotation": [
      "Flow"
    ],
    "TypeCastExpression": [
      "Flow",
      "ExpressionWrapper",
      "Expression"
    ],
    "TypeParameter": [
      "Flow"
    ],
    "TypeParameterDeclaration": [
      "Flow"
    ],
    "TypeParameterInstantiation": [
      "Flow"
    ],
    "UnionTypeAnnotation": [
      "Flow",
      "FlowType"
    ],
    "Variance": [
      "Flow"
    ],
    "VoidTypeAnnotation": [
      "Flow",
      "FlowType",
      "FlowBaseAnnotation"
    ],
    "EnumDeclaration": [
      "Flow",
      "Statement",
      "Declaration"
    ],
    "EnumBooleanBody": [
      "Flow",
      "EnumBody"
    ],
    "EnumNumberBody": [
      "Flow",
      "EnumBody"
    ],
    "EnumStringBody": [
      "Flow",
      "EnumBody"
    ],
    "EnumSymbolBody": [
      "Flow",
      "EnumBody"
    ],
    "EnumBooleanMember": [
      "Flow",
      "EnumMember"
    ],
    "EnumNumberMember": [
      "Flow",
      "EnumMember"
    ],
    "EnumStringMember": [
      "Flow",
      "EnumMember"
    ],
    "EnumDefaultedMember": [
      "Flow",
      "EnumMember"
    ],
    "IndexedAccessType": [
      "Flow",
      "FlowType"
    ],
    "OptionalIndexedAccessType": [
      "Flow",
      "FlowType"
    ],
    "JSXAttribute": [
      "JSX",
      "Immutable"
    ],
    "JSXClosingElement": [
      "JSX",
      "Immutable"
    ],
    "JSXElement": [
      "JSX",
      "Immutable",
      "Expression"
    ],
    "JSXEmptyExpression": [
      "JSX"
    ],
    "JSXExpressionContainer": [
      "JSX",
      "Immutable"
    ],
    "JSXSpreadChild": [
      "JSX",
      "Immutable"
    ],
    "JSXIdentifier": [
      "JSX"
    ],
    "JSXMemberExpression": [
      "JSX"
    ],
    "JSXNamespacedName": [
      "JSX"
    ],
    "JSXOpeningElement": [
      "JSX",
      "Immutable"
    ],
    "JSXSpreadAttribute": [
      "JSX"
    ],
    "JSXText": [
      "JSX",
      "Immutable"
    ],
    "JSXFragment": [
      "JSX",
      "Immutable",
      "Expression"
    ],
    "JSXOpeningFragment": [
      "JSX",
      "Immutable"
    ],
    "JSXClosingFragment": [
      "JSX",
      "Immutable"
    ],
    "Noop": [
      "Miscellaneous"
    ],
    "Placeholder": [
      "Miscellaneous"
    ],
    "V8IntrinsicIdentifier": [
      "Miscellaneous"
    ],
    "ArgumentPlaceholder": [],
    "BindExpression": [
      "Expression"
    ],
    "Decorator": [],
    "DoExpression": [
      "Expression"
    ],
    "ExportDefaultSpecifier": [
      "ModuleSpecifier"
    ],
    "RecordExpression": [
      "Expression"
    ],
    "TupleExpression": [
      "Expression"
    ],
    "DecimalLiteral": [
      "Expression",
      "Pureish",
      "Literal",
      "Immutable"
    ],
    "ModuleExpression": [
      "Expression"
    ],
    "TopicReference": [
      "Expression"
    ],
    "PipelineTopicExpression": [
      "Expression"
    ],
    "PipelineBareFunction": [
      "Expression"
    ],
    "PipelinePrimaryTopicReference": [
      "Expression"
    ],
    "VoidPattern": [
      "Pattern",
      "PatternLike",
      "FunctionParameter"
    ],
    "TSParameterProperty": [
      "TypeScript",
      "LVal"
    ],
    "TSDeclareFunction": [
      "TypeScript",
      "Statement",
      "Declaration"
    ],
    "TSDeclareMethod": [
      "TypeScript"
    ],
    "TSQualifiedName": [
      "TypeScript",
      "TSEntityName"
    ],
    "TSCallSignatureDeclaration": [
      "TypeScript",
      "TSTypeElement"
    ],
    "TSConstructSignatureDeclaration": [
      "TypeScript",
      "TSTypeElement"
    ],
    "TSPropertySignature": [
      "TypeScript",
      "TSTypeElement"
    ],
    "TSMethodSignature": [
      "TypeScript",
      "TSTypeElement"
    ],
    "TSIndexSignature": [
      "TypeScript",
      "TSTypeElement"
    ],
    "TSAnyKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSBooleanKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSBigIntKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSIntrinsicKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSNeverKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSNullKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSNumberKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSObjectKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSStringKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSSymbolKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSUndefinedKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSUnknownKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSVoidKeyword": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSThisType": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSFunctionType": [
      "TypeScript",
      "TSType"
    ],
    "TSConstructorType": [
      "TypeScript",
      "TSType"
    ],
    "TSTypeReference": [
      "TypeScript",
      "TSType"
    ],
    "TSTypePredicate": [
      "TypeScript",
      "TSType"
    ],
    "TSTypeQuery": [
      "TypeScript",
      "TSType"
    ],
    "TSTypeLiteral": [
      "TypeScript",
      "TSType"
    ],
    "TSArrayType": [
      "TypeScript",
      "TSType"
    ],
    "TSTupleType": [
      "TypeScript",
      "TSType"
    ],
    "TSOptionalType": [
      "TypeScript",
      "TSType"
    ],
    "TSRestType": [
      "TypeScript",
      "TSType"
    ],
    "TSNamedTupleMember": [
      "TypeScript"
    ],
    "TSUnionType": [
      "TypeScript",
      "TSType"
    ],
    "TSIntersectionType": [
      "TypeScript",
      "TSType"
    ],
    "TSConditionalType": [
      "TypeScript",
      "TSType"
    ],
    "TSInferType": [
      "TypeScript",
      "TSType"
    ],
    "TSParenthesizedType": [
      "TypeScript",
      "TSType"
    ],
    "TSTypeOperator": [
      "TypeScript",
      "TSType"
    ],
    "TSIndexedAccessType": [
      "TypeScript",
      "TSType"
    ],
    "TSMappedType": [
      "TypeScript",
      "TSType"
    ],
    "TSTemplateLiteralType": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSLiteralType": [
      "TypeScript",
      "TSType",
      "TSBaseType"
    ],
    "TSExpressionWithTypeArguments": [
      "TypeScript",
      "TSType"
    ],
    "TSInterfaceDeclaration": [
      "TypeScript",
      "Statement",
      "Declaration"
    ],
    "TSInterfaceBody": [
      "TypeScript"
    ],
    "TSTypeAliasDeclaration": [
      "TypeScript",
      "Statement",
      "Declaration"
    ],
    "TSInstantiationExpression": [
      "TypeScript",
      "Expression"
    ],
    "TSAsExpression": [
      "TypeScript",
      "Expression",
      "LVal",
      "PatternLike"
    ],
    "TSSatisfiesExpression": [
      "TypeScript",
      "Expression",
      "LVal",
      "PatternLike"
    ],
    "TSTypeAssertion": [
      "TypeScript",
      "Expression",
      "LVal",
      "PatternLike"
    ],
    "TSEnumBody": [
      "TypeScript"
    ],
    "TSEnumDeclaration": [
      "TypeScript",
      "Statement",
      "Declaration"
    ],
    "TSEnumMember": [
      "TypeScript"
    ],
    "TSModuleDeclaration": [
      "TypeScript",
      "Statement",
      "Declaration"
    ],
    "TSModuleBlock": [
      "TypeScript",
      "Scopable",
      "Block",
      "BlockParent",
      "FunctionParent"
    ],
    "TSImportType": [
      "TypeScript",
      "TSType"
    ],
    "TSImportEqualsDeclaration": [
      "TypeScript",
      "Statement",
      "Declaration"
    ],
    "TSExternalModuleReference": [
      "TypeScript"
    ],
    "TSNonNullExpression": [
      "TypeScript",
      "Expression",
      "LVal",
      "PatternLike"
    ],
    "TSExportAssignment": [
      "TypeScript",
      "Statement"
    ],
    "TSNamespaceExportDeclaration": [
      "TypeScript",
      "Statement"
    ],
    "TSTypeAnnotation": [
      "TypeScript"
    ],
    "TSTypeParameterInstantiation": [
      "TypeScript"
    ],
    "TSTypeParameterDeclaration": [
      "TypeScript"
    ],
    "TSTypeParameter": [
      "TypeScript"
    ]
  },
  "typeCategories": {
    "ACCESSOR_TYPES": [
      "ClassAccessorProperty"
    ],
    "BINARY_TYPES": [
      "BinaryExpression",
      "LogicalExpression"
    ],
    "BLOCKPARENT_TYPES": [
      "BlockStatement",
      "CatchClause",
      "DoWhileStatement",
      "ForInStatement",
      "ForStatement",
      "FunctionDeclaration",
      "FunctionExpression",
      "Program",
      "ObjectMethod",
      "SwitchStatement",
      "WhileStatement",
      "ArrowFunctionExpression",
      "ForOfStatement",
      "ClassMethod",
      "ClassPrivateMethod",
      "StaticBlock",
      "TSModuleBlock"
    ],
    "BLOCK_TYPES": [
      "BlockStatement",
      "Program",
      "TSModuleBlock"
    ],
    "CLASS_TYPES": [
      "ClassExpression",
      "ClassDeclaration"
    ],
    "COMPLETIONSTATEMENT_TYPES": [
      "BreakStatement",
      "ContinueStatement",
      "ReturnStatement",
      "ThrowStatement"
    ],
    "CONDITIONAL_TYPES": [
      "ConditionalExpression",
      "IfStatement"
    ],
    "DECLARATION_TYPES": [
      "FunctionDeclaration",
      "VariableDeclaration",
      "ClassDeclaration",
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ImportDeclaration",
      "DeclareClass",
      "DeclareFunction",
      "DeclareInterface",
      "DeclareModule",
      "DeclareModuleExports",
      "DeclareTypeAlias",
      "DeclareOpaqueType",
      "DeclareVariable",
      "DeclareExportDeclaration",
      "DeclareExportAllDeclaration",
      "InterfaceDeclaration",
      "OpaqueType",
      "TypeAlias",
      "EnumDeclaration",
      "TSDeclareFunction",
      "TSInterfaceDeclaration",
      "TSTypeAliasDeclaration",
      "TSEnumDeclaration",
      "TSModuleDeclaration",
      "TSImportEqualsDeclaration"
    ],
    "ENUMBODY_TYPES": [
      "EnumBooleanBody",
      "EnumNumberBody",
      "EnumStringBody",
      "EnumSymbolBody"
    ],
    "ENUMMEMBER_TYPES": [
      "EnumBooleanMember",
      "EnumNumberMember",
      "EnumStringMember",
      "EnumDefaultedMember"
    ],
    "EXPORTDECLARATION_TYPES": [
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration"
    ],
    "EXPRESSIONWRAPPER_TYPES": [
      "ExpressionStatement",
      "ParenthesizedExpression",
      "TypeCastExpression"
    ],
    "EXPRESSION_TYPES": [
      "ArrayExpression",
      "AssignmentExpression",
      "BinaryExpression",
      "CallExpression",
      "ConditionalExpression",
      "FunctionExpression",
      "Identifier",
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "RegExpLiteral",
      "LogicalExpression",
      "MemberExpression",
      "NewExpression",
      "ObjectExpression",
      "SequenceExpression",
      "ParenthesizedExpression",
      "ThisExpression",
      "UnaryExpression",
      "UpdateExpression",
      "ArrowFunctionExpression",
      "ClassExpression",
      "ImportExpression",
      "MetaProperty",
      "Super",
      "TaggedTemplateExpression",
      "TemplateLiteral",
      "YieldExpression",
      "AwaitExpression",
      "Import",
      "BigIntLiteral",
      "OptionalMemberExpression",
      "OptionalCallExpression",
      "TypeCastExpression",
      "JSXElement",
      "JSXFragment",
      "BindExpression",
      "DoExpression",
      "RecordExpression",
      "TupleExpression",
      "DecimalLiteral",
      "ModuleExpression",
      "TopicReference",
      "PipelineTopicExpression",
      "PipelineBareFunction",
      "PipelinePrimaryTopicReference",
      "TSInstantiationExpression",
      "TSAsExpression",
      "TSSatisfiesExpression",
      "TSTypeAssertion",
      "TSNonNullExpression"
    ],
    "FLOWBASEANNOTATION_TYPES": [
      "AnyTypeAnnotation",
      "BooleanTypeAnnotation",
      "NullLiteralTypeAnnotation",
      "MixedTypeAnnotation",
      "EmptyTypeAnnotation",
      "NumberTypeAnnotation",
      "StringTypeAnnotation",
      "SymbolTypeAnnotation",
      "ThisTypeAnnotation",
      "VoidTypeAnnotation"
    ],
    "FLOWDECLARATION_TYPES": [
      "DeclareClass",
      "DeclareFunction",
      "DeclareInterface",
      "DeclareModule",
      "DeclareModuleExports",
      "DeclareTypeAlias",
      "DeclareOpaqueType",
      "DeclareVariable",
      "DeclareExportDeclaration",
      "DeclareExportAllDeclaration",
      "InterfaceDeclaration",
      "OpaqueType",
      "TypeAlias"
    ],
    "FLOWPREDICATE_TYPES": [
      "DeclaredPredicate",
      "InferredPredicate"
    ],
    "FLOWTYPE_TYPES": [
      "AnyTypeAnnotation",
      "ArrayTypeAnnotation",
      "BooleanTypeAnnotation",
      "BooleanLiteralTypeAnnotation",
      "NullLiteralTypeAnnotation",
      "ExistsTypeAnnotation",
      "FunctionTypeAnnotation",
      "GenericTypeAnnotation",
      "InterfaceTypeAnnotation",
      "IntersectionTypeAnnotation",
      "MixedTypeAnnotation",
      "EmptyTypeAnnotation",
      "NullableTypeAnnotation",
      "NumberLiteralTypeAnnotation",
      "NumberTypeAnnotation",
      "ObjectTypeAnnotation",
      "StringLiteralTypeAnnotation",
      "StringTypeAnnotation",
      "SymbolTypeAnnotation",
      "ThisTypeAnnotation",
      "TupleTypeAnnotation",
      "TypeofTypeAnnotation",
      "UnionTypeAnnotation",
      "VoidTypeAnnotation",
      "IndexedAccessType",
      "OptionalIndexedAccessType"
    ],
    "FLOW_TYPES": [
      "AnyTypeAnnotation",
      "ArrayTypeAnnotation",
      "BooleanTypeAnnotation",
      "BooleanLiteralTypeAnnotation",
      "NullLiteralTypeAnnotation",
      "ClassImplements",
      "DeclareClass",
      "DeclareFunction",
      "DeclareInterface",
      "DeclareModule",
      "DeclareModuleExports",
      "DeclareTypeAlias",
      "DeclareOpaqueType",
      "DeclareVariable",
      "DeclareExportDeclaration",
      "DeclareExportAllDeclaration",
      "DeclaredPredicate",
      "ExistsTypeAnnotation",
      "FunctionTypeAnnotation",
      "FunctionTypeParam",
      "GenericTypeAnnotation",
      "InferredPredicate",
      "InterfaceExtends",
      "InterfaceDeclaration",
      "InterfaceTypeAnnotation",
      "IntersectionTypeAnnotation",
      "MixedTypeAnnotation",
      "EmptyTypeAnnotation",
      "NullableTypeAnnotation",
      "NumberLiteralTypeAnnotation",
      "NumberTypeAnnotation",
      "ObjectTypeAnnotation",
      "ObjectTypeInternalSlot",
      "ObjectTypeCallProperty",
      "ObjectTypeIndexer",
      "ObjectTypeProperty",
      "ObjectTypeSpreadProperty",
      "OpaqueType",
      "QualifiedTypeIdentifier",
      "StringLiteralTypeAnnotation",
      "StringTypeAnnotation",
      "SymbolTypeAnnotation",
      "ThisTypeAnnotation",
      "TupleTypeAnnotation",
      "TypeofTypeAnnotation",
      "TypeAlias",
      "TypeAnnotation",
      "TypeCastExpression",
      "TypeParameter",
      "TypeParameterDeclaration",
      "TypeParameterInstantiation",
      "UnionTypeAnnotation",
      "Variance",
      "VoidTypeAnnotation",
      "EnumDeclaration",
      "EnumBooleanBody",
      "EnumNumberBody",
      "EnumStringBody",
      "EnumSymbolBody",
      "EnumBooleanMember",
      "EnumNumberMember",
      "EnumStringMember",
      "EnumDefaultedMember",
      "IndexedAccessType",
      "OptionalIndexedAccessType"
    ],
    "FORXSTATEMENT_TYPES": [
      "ForInStatement",
      "ForOfStatement"
    ],
    "FOR_TYPES": [
      "ForInStatement",
      "ForStatement",
      "ForOfStatement"
    ],
    "FUNCTIONPARAMETER_TYPES": [
      "Identifier",
      "RestElement",
      "AssignmentPattern",
      "ArrayPattern",
      "ObjectPattern",
      "VoidPattern"
    ],
    "FUNCTIONPARENT_TYPES": [
      "FunctionDeclaration",
      "FunctionExpression",
      "ObjectMethod",
      "ArrowFunctionExpression",
      "ClassMethod",
      "ClassPrivateMethod",
      "StaticBlock",
      "TSModuleBlock"
    ],
    "FUNCTION_TYPES": [
      "FunctionDeclaration",
      "FunctionExpression",
      "ObjectMethod",
      "ArrowFunctionExpression",
      "ClassMethod",
      "ClassPrivateMethod"
    ],
    "IMMUTABLE_TYPES": [
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "BigIntLiteral",
      "JSXAttribute",
      "JSXClosingElement",
      "JSXElement",
      "JSXExpressionContainer",
      "JSXSpreadChild",
      "JSXOpeningElement",
      "JSXText",
      "JSXFragment",
      "JSXOpeningFragment",
      "JSXClosingFragment",
      "DecimalLiteral"
    ],
    "IMPORTOREXPORTDECLARATION_TYPES": [
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ImportDeclaration"
    ],
    "JSX_TYPES": [
      "JSXAttribute",
      "JSXClosingElement",
      "JSXElement",
      "JSXEmptyExpression",
      "JSXExpressionContainer",
      "JSXSpreadChild",
      "JSXIdentifier",
      "JSXMemberExpression",
      "JSXNamespacedName",
      "JSXOpeningElement",
      "JSXSpreadAttribute",
      "JSXText",
      "JSXFragment",
      "JSXOpeningFragment",
      "JSXClosingFragment"
    ],
    "LITERAL_TYPES": [
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "RegExpLiteral",
      "TemplateLiteral",
      "BigIntLiteral",
      "DecimalLiteral"
    ],
    "LOOP_TYPES": [
      "DoWhileStatement",
      "ForInStatement",
      "ForStatement",
      "WhileStatement",
      "ForOfStatement"
    ],
    "LVAL_TYPES": [
      "Identifier",
      "MemberExpression",
      "RestElement",
      "AssignmentPattern",
      "ArrayPattern",
      "ObjectPattern",
      "TSParameterProperty",
      "TSAsExpression",
      "TSSatisfiesExpression",
      "TSTypeAssertion",
      "TSNonNullExpression"
    ],
    "METHOD_TYPES": [
      "ObjectMethod",
      "ClassMethod",
      "ClassPrivateMethod"
    ],
    "MISCELLANEOUS_TYPES": [
      "Noop",
      "Placeholder",
      "V8IntrinsicIdentifier"
    ],
    "MODULEDECLARATION_TYPES": [
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ImportDeclaration"
    ],
    "MODULESPECIFIER_TYPES": [
      "ExportSpecifier",
      "ImportDefaultSpecifier",
      "ImportNamespaceSpecifier",
      "ImportSpecifier",
      "ExportNamespaceSpecifier",
      "ExportDefaultSpecifier"
    ],
    "OBJECTMEMBER_TYPES": [
      "ObjectMethod",
      "ObjectProperty"
    ],
    "PATTERNLIKE_TYPES": [
      "Identifier",
      "MemberExpression",
      "RestElement",
      "AssignmentPattern",
      "ArrayPattern",
      "ObjectPattern",
      "VoidPattern",
      "TSAsExpression",
      "TSSatisfiesExpression",
      "TSTypeAssertion",
      "TSNonNullExpression"
    ],
    "PATTERN_TYPES": [
      "AssignmentPattern",
      "ArrayPattern",
      "ObjectPattern",
      "VoidPattern"
    ],
    "PRIVATE_TYPES": [
      "ClassPrivateProperty",
      "ClassPrivateMethod",
      "PrivateName"
    ],
    "PROPERTY_TYPES": [
      "ObjectProperty",
      "ClassProperty",
      "ClassAccessorProperty",
      "ClassPrivateProperty"
    ],
    "PUREISH_TYPES": [
      "FunctionDeclaration",
      "FunctionExpression",
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "RegExpLiteral",
      "ArrowFunctionExpression",
      "BigIntLiteral",
      "DecimalLiteral"
    ],
    "SCOPABLE_TYPES": [
      "BlockStatement",
      "CatchClause",
      "DoWhileStatement",
      "ForInStatement",
      "ForStatement",
      "FunctionDeclaration",
      "FunctionExpression",
      "Program",
      "ObjectMethod",
      "SwitchStatement",
      "WhileStatement",
      "ArrowFunctionExpression",
      "ClassExpression",
      "ClassDeclaration",
      "ForOfStatement",
      "ClassMethod",
      "ClassPrivateMethod",
      "StaticBlock",
      "TSModuleBlock"
    ],
    "STANDARDIZED_TYPES": [
      "ArrayExpression",
      "AssignmentExpression",
      "BinaryExpression",
      "InterpreterDirective",
      "Directive",
      "DirectiveLiteral",
      "BlockStatement",
      "BreakStatement",
      "CallExpression",
      "CatchClause",
      "ConditionalExpression",
      "ContinueStatement",
      "DebuggerStatement",
      "DoWhileStatement",
      "EmptyStatement",
      "ExpressionStatement",
      "File",
      "ForInStatement",
      "ForStatement",
      "FunctionDeclaration",
      "FunctionExpression",
      "Identifier",
      "IfStatement",
      "LabeledStatement",
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "RegExpLiteral",
      "LogicalExpression",
      "MemberExpression",
      "NewExpression",
      "Program",
      "ObjectExpression",
      "ObjectMethod",
      "ObjectProperty",
      "RestElement",
      "ReturnStatement",
      "SequenceExpression",
      "ParenthesizedExpression",
      "SwitchCase",
      "SwitchStatement",
      "ThisExpression",
      "ThrowStatement",
      "TryStatement",
      "UnaryExpression",
      "UpdateExpression",
      "VariableDeclaration",
      "VariableDeclarator",
      "WhileStatement",
      "WithStatement",
      "AssignmentPattern",
      "ArrayPattern",
      "ArrowFunctionExpression",
      "ClassBody",
      "ClassExpression",
      "ClassDeclaration",
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ExportSpecifier",
      "ForOfStatement",
      "ImportDeclaration",
      "ImportDefaultSpecifier",
      "ImportNamespaceSpecifier",
      "ImportSpecifier",
      "ImportExpression",
      "MetaProperty",
      "ClassMethod",
      "ObjectPattern",
      "SpreadElement",
      "Super",
      "TaggedTemplateExpression",
      "TemplateElement",
      "TemplateLiteral",
      "YieldExpression",
      "AwaitExpression",
      "Import",
      "BigIntLiteral",
      "ExportNamespaceSpecifier",
      "OptionalMemberExpression",
      "OptionalCallExpression",
      "ClassProperty",
      "ClassAccessorProperty",
      "ClassPrivateProperty",
      "ClassPrivateMethod",
      "PrivateName",
      "StaticBlock",
      "ImportAttribute"
    ],
    "STATEMENT_TYPES": [
      "BlockStatement",
      "BreakStatement",
      "ContinueStatement",
      "DebuggerStatement",
      "DoWhileStatement",
      "EmptyStatement",
      "ExpressionStatement",
      "ForInStatement",
      "ForStatement",
      "FunctionDeclaration",
      "IfStatement",
      "LabeledStatement",
      "ReturnStatement",
      "SwitchStatement",
      "ThrowStatement",
      "TryStatement",
      "VariableDeclaration",
      "WhileStatement",
      "WithStatement",
      "ClassDeclaration",
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ForOfStatement",
      "ImportDeclaration",
      "DeclareClass",
      "DeclareFunction",
      "DeclareInterface",
      "DeclareModule",
      "DeclareModuleExports",
      "DeclareTypeAlias",
      "DeclareOpaqueType",
      "DeclareVariable",
      "DeclareExportDeclaration",
      "DeclareExportAllDeclaration",
      "InterfaceDeclaration",
      "OpaqueType",
      "TypeAlias",
      "EnumDeclaration",
      "TSDeclareFunction",
      "TSInterfaceDeclaration",
      "TSTypeAliasDeclaration",
      "TSEnumDeclaration",
      "TSModuleDeclaration",
      "TSImportEqualsDeclaration",
      "TSExportAssignment",
      "TSNamespaceExportDeclaration"
    ],
    "TERMINATORLESS_TYPES": [
      "BreakStatement",
      "ContinueStatement",
      "ReturnStatement",
      "ThrowStatement",
      "YieldExpression",
      "AwaitExpression"
    ],
    "TSBASETYPE_TYPES": [
      "TSAnyKeyword",
      "TSBooleanKeyword",
      "TSBigIntKeyword",
      "TSIntrinsicKeyword",
      "TSNeverKeyword",
      "TSNullKeyword",
      "TSNumberKeyword",
      "TSObjectKeyword",
      "TSStringKeyword",
      "TSSymbolKeyword",
      "TSUndefinedKeyword",
      "TSUnknownKeyword",
      "TSVoidKeyword",
      "TSThisType",
      "TSTemplateLiteralType",
      "TSLiteralType"
    ],
    "TSENTITYNAME_TYPES": [
      "Identifier",
      "TSQualifiedName"
    ],
    "TSTYPEELEMENT_TYPES": [
      "TSCallSignatureDeclaration",
      "TSConstructSignatureDeclaration",
      "TSPropertySignature",
      "TSMethodSignature",
      "TSIndexSignature"
    ],
    "TSTYPE_TYPES": [
      "TSAnyKeyword",
      "TSBooleanKeyword",
      "TSBigIntKeyword",
      "TSIntrinsicKeyword",
      "TSNeverKeyword",
      "TSNullKeyword",
      "TSNumberKeyword",
      "TSObjectKeyword",
      "TSStringKeyword",
      "TSSymbolKeyword",
      "TSUndefinedKeyword",
      "TSUnknownKeyword",
      "TSVoidKeyword",
      "TSThisType",
      "TSFunctionType",
      "TSConstructorType",
      "TSTypeReference",
      "TSTypePredicate",
      "TSTypeQuery",
      "TSTypeLiteral",
      "TSArrayType",
      "TSTupleType",
      "TSOptionalType",
      "TSRestType",
      "TSUnionType",
      "TSIntersectionType",
      "TSConditionalType",
      "TSInferType",
      "TSParenthesizedType",
      "TSTypeOperator",
      "TSIndexedAccessType",
      "TSMappedType",
      "TSTemplateLiteralType",
      "TSLiteralType",
      "TSExpressionWithTypeArguments",
      "TSImportType"
    ],
    "TYPESCRIPT_TYPES": [
      "TSParameterProperty",
      "TSDeclareFunction",
      "TSDeclareMethod",
      "TSQualifiedName",
      "TSCallSignatureDeclaration",
      "TSConstructSignatureDeclaration",
      "TSPropertySignature",
      "TSMethodSignature",
      "TSIndexSignature",
      "TSAnyKeyword",
      "TSBooleanKeyword",
      "TSBigIntKeyword",
      "TSIntrinsicKeyword",
      "TSNeverKeyword",
      "TSNullKeyword",
      "TSNumberKeyword",
      "TSObjectKeyword",
      "TSStringKeyword",
      "TSSymbolKeyword",
      "TSUndefinedKeyword",
      "TSUnknownKeyword",
      "TSVoidKeyword",
      "TSThisType",
      "TSFunctionType",
      "TSConstructorType",
      "TSTypeReference",
      "TSTypePredicate",
      "TSTypeQuery",
      "TSTypeLiteral",
      "TSArrayType",
      "TSTupleType",
      "TSOptionalType",
      "TSRestType",
      "TSNamedTupleMember",
      "TSUnionType",
      "TSIntersectionType",
      "TSConditionalType",
      "TSInferType",
      "TSParenthesizedType",
      "TSTypeOperator",
      "TSIndexedAccessType",
      "TSMappedType",
      "TSTemplateLiteralType",
      "TSLiteralType",
      "TSExpressionWithTypeArguments",
      "TSInterfaceDeclaration",
      "TSInterfaceBody",
      "TSTypeAliasDeclaration",
      "TSInstantiationExpression",
      "TSAsExpression",
      "TSSatisfiesExpression",
      "TSTypeAssertion",
      "TSEnumBody",
      "TSEnumDeclaration",
      "TSEnumMember",
      "TSModuleDeclaration",
      "TSModuleBlock",
      "TSImportType",
      "TSImportEqualsDeclaration",
      "TSExternalModuleReference",
      "TSNonNullExpression",
      "TSExportAssignment",
      "TSNamespaceExportDeclaration",
      "TSTypeAnnotation",
      "TSTypeParameterInstantiation",
      "TSTypeParameterDeclaration",
      "TSTypeParameter"
    ],
    "UNARYLIKE_TYPES": [
      "UnaryExpression",
      "SpreadElement"
    ],
    "USERWHITESPACABLE_TYPES": [
      "ObjectMethod",
      "ObjectProperty",
      "ObjectTypeInternalSlot",
      "ObjectTypeCallProperty",
      "ObjectTypeIndexer",
      "ObjectTypeProperty",
      "ObjectTypeSpreadProperty"
    ],
    "WHILE_TYPES": [
      "DoWhileStatement",
      "WhileStatement"
    ]
  },
  "typeAliases": {
    "ACCESSOR": [
      "ClassAccessorProperty"
    ],
    "BINARY": [
      "BinaryExpression",
      "LogicalExpression"
    ],
    "BLOCKPARENT": [
      "BlockStatement",
      "CatchClause",
      "DoWhileStatement",
      "ForInStatement",
      "ForStatement",
      "FunctionDeclaration",
      "FunctionExpression",
      "Program",
      "ObjectMethod",
      "SwitchStatement",
      "WhileStatement",
      "ArrowFunctionExpression",
      "ForOfStatement",
      "ClassMethod",
      "ClassPrivateMethod",
      "StaticBlock",
      "TSModuleBlock"
    ],
    "BLOCK": [
      "BlockStatement",
      "Program",
      "TSModuleBlock"
    ],
    "CLASS": [
      "ClassExpression",
      "ClassDeclaration"
    ],
    "COMPLETIONSTATEMENT": [
      "BreakStatement",
      "ContinueStatement",
      "ReturnStatement",
      "ThrowStatement"
    ],
    "CONDITIONAL": [
      "ConditionalExpression",
      "IfStatement"
    ],
    "DECLARATION": [
      "FunctionDeclaration",
      "VariableDeclaration",
      "ClassDeclaration",
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ImportDeclaration",
      "DeclareClass",
      "DeclareFunction",
      "DeclareInterface",
      "DeclareModule",
      "DeclareModuleExports",
      "DeclareTypeAlias",
      "DeclareOpaqueType",
      "DeclareVariable",
      "DeclareExportDeclaration",
      "DeclareExportAllDeclaration",
      "InterfaceDeclaration",
      "OpaqueType",
      "TypeAlias",
      "EnumDeclaration",
      "TSDeclareFunction",
      "TSInterfaceDeclaration",
      "TSTypeAliasDeclaration",
      "TSEnumDeclaration",
      "TSModuleDeclaration",
      "TSImportEqualsDeclaration"
    ],
    "ENUMBODY": [
      "EnumBooleanBody",
      "EnumNumberBody",
      "EnumStringBody",
      "EnumSymbolBody"
    ],
    "ENUMMEMBER": [
      "EnumBooleanMember",
      "EnumNumberMember",
      "EnumStringMember",
      "EnumDefaultedMember"
    ],
    "EXPORTDECLARATION": [
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration"
    ],
    "EXPRESSIONWRAPPER": [
      "ExpressionStatement",
      "ParenthesizedExpression",
      "TypeCastExpression"
    ],
    "EXPRESSION": [
      "ArrayExpression",
      "AssignmentExpression",
      "BinaryExpression",
      "CallExpression",
      "ConditionalExpression",
      "FunctionExpression",
      "Identifier",
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "RegExpLiteral",
      "LogicalExpression",
      "MemberExpression",
      "NewExpression",
      "ObjectExpression",
      "SequenceExpression",
      "ParenthesizedExpression",
      "ThisExpression",
      "UnaryExpression",
      "UpdateExpression",
      "ArrowFunctionExpression",
      "ClassExpression",
      "ImportExpression",
      "MetaProperty",
      "Super",
      "TaggedTemplateExpression",
      "TemplateLiteral",
      "YieldExpression",
      "AwaitExpression",
      "Import",
      "BigIntLiteral",
      "OptionalMemberExpression",
      "OptionalCallExpression",
      "TypeCastExpression",
      "JSXElement",
      "JSXFragment",
      "BindExpression",
      "DoExpression",
      "RecordExpression",
      "TupleExpression",
      "DecimalLiteral",
      "ModuleExpression",
      "TopicReference",
      "PipelineTopicExpression",
      "PipelineBareFunction",
      "PipelinePrimaryTopicReference",
      "TSInstantiationExpression",
      "TSAsExpression",
      "TSSatisfiesExpression",
      "TSTypeAssertion",
      "TSNonNullExpression"
    ],
    "FLOWBASEANNOTATION": [
      "AnyTypeAnnotation",
      "BooleanTypeAnnotation",
      "NullLiteralTypeAnnotation",
      "MixedTypeAnnotation",
      "EmptyTypeAnnotation",
      "NumberTypeAnnotation",
      "StringTypeAnnotation",
      "SymbolTypeAnnotation",
      "ThisTypeAnnotation",
      "VoidTypeAnnotation"
    ],
    "FLOWDECLARATION": [
      "DeclareClass",
      "DeclareFunction",
      "DeclareInterface",
      "DeclareModule",
      "DeclareModuleExports",
      "DeclareTypeAlias",
      "DeclareOpaqueType",
      "DeclareVariable",
      "DeclareExportDeclaration",
      "DeclareExportAllDeclaration",
      "InterfaceDeclaration",
      "OpaqueType",
      "TypeAlias"
    ],
    "FLOWPREDICATE": [
      "DeclaredPredicate",
      "InferredPredicate"
    ],
    "FLOWTYPE": [
      "AnyTypeAnnotation",
      "ArrayTypeAnnotation",
      "BooleanTypeAnnotation",
      "BooleanLiteralTypeAnnotation",
      "NullLiteralTypeAnnotation",
      "ExistsTypeAnnotation",
      "FunctionTypeAnnotation",
      "GenericTypeAnnotation",
      "InterfaceTypeAnnotation",
      "IntersectionTypeAnnotation",
      "MixedTypeAnnotation",
      "EmptyTypeAnnotation",
      "NullableTypeAnnotation",
      "NumberLiteralTypeAnnotation",
      "NumberTypeAnnotation",
      "ObjectTypeAnnotation",
      "StringLiteralTypeAnnotation",
      "StringTypeAnnotation",
      "SymbolTypeAnnotation",
      "ThisTypeAnnotation",
      "TupleTypeAnnotation",
      "TypeofTypeAnnotation",
      "UnionTypeAnnotation",
      "VoidTypeAnnotation",
      "IndexedAccessType",
      "OptionalIndexedAccessType"
    ],
    "FLOW": [
      "AnyTypeAnnotation",
      "ArrayTypeAnnotation",
      "BooleanTypeAnnotation",
      "BooleanLiteralTypeAnnotation",
      "NullLiteralTypeAnnotation",
      "ClassImplements",
      "DeclareClass",
      "DeclareFunction",
      "DeclareInterface",
      "DeclareModule",
      "DeclareModuleExports",
      "DeclareTypeAlias",
      "DeclareOpaqueType",
      "DeclareVariable",
      "DeclareExportDeclaration",
      "DeclareExportAllDeclaration",
      "DeclaredPredicate",
      "ExistsTypeAnnotation",
      "FunctionTypeAnnotation",
      "FunctionTypeParam",
      "GenericTypeAnnotation",
      "InferredPredicate",
      "InterfaceExtends",
      "InterfaceDeclaration",
      "InterfaceTypeAnnotation",
      "IntersectionTypeAnnotation",
      "MixedTypeAnnotation",
      "EmptyTypeAnnotation",
      "NullableTypeAnnotation",
      "NumberLiteralTypeAnnotation",
      "NumberTypeAnnotation",
      "ObjectTypeAnnotation",
      "ObjectTypeInternalSlot",
      "ObjectTypeCallProperty",
      "ObjectTypeIndexer",
      "ObjectTypeProperty",
      "ObjectTypeSpreadProperty",
      "OpaqueType",
      "QualifiedTypeIdentifier",
      "StringLiteralTypeAnnotation",
      "StringTypeAnnotation",
      "SymbolTypeAnnotation",
      "ThisTypeAnnotation",
      "TupleTypeAnnotation",
      "TypeofTypeAnnotation",
      "TypeAlias",
      "TypeAnnotation",
      "TypeCastExpression",
      "TypeParameter",
      "TypeParameterDeclaration",
      "TypeParameterInstantiation",
      "UnionTypeAnnotation",
      "Variance",
      "VoidTypeAnnotation",
      "EnumDeclaration",
      "EnumBooleanBody",
      "EnumNumberBody",
      "EnumStringBody",
      "EnumSymbolBody",
      "EnumBooleanMember",
      "EnumNumberMember",
      "EnumStringMember",
      "EnumDefaultedMember",
      "IndexedAccessType",
      "OptionalIndexedAccessType"
    ],
    "FORXSTATEMENT": [
      "ForInStatement",
      "ForOfStatement"
    ],
    "FOR": [
      "ForInStatement",
      "ForStatement",
      "ForOfStatement"
    ],
    "FUNCTIONPARAMETER": [
      "Identifier",
      "RestElement",
      "AssignmentPattern",
      "ArrayPattern",
      "ObjectPattern",
      "VoidPattern"
    ],
    "FUNCTIONPARENT": [
      "FunctionDeclaration",
      "FunctionExpression",
      "ObjectMethod",
      "ArrowFunctionExpression",
      "ClassMethod",
      "ClassPrivateMethod",
      "StaticBlock",
      "TSModuleBlock"
    ],
    "FUNCTION": [
      "FunctionDeclaration",
      "FunctionExpression",
      "ObjectMethod",
      "ArrowFunctionExpression",
      "ClassMethod",
      "ClassPrivateMethod"
    ],
    "IMMUTABLE": [
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "BigIntLiteral",
      "JSXAttribute",
      "JSXClosingElement",
      "JSXElement",
      "JSXExpressionContainer",
      "JSXSpreadChild",
      "JSXOpeningElement",
      "JSXText",
      "JSXFragment",
      "JSXOpeningFragment",
      "JSXClosingFragment",
      "DecimalLiteral"
    ],
    "IMPORTOREXPORTDECLARATION": [
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ImportDeclaration"
    ],
    "JSX": [
      "JSXAttribute",
      "JSXClosingElement",
      "JSXElement",
      "JSXEmptyExpression",
      "JSXExpressionContainer",
      "JSXSpreadChild",
      "JSXIdentifier",
      "JSXMemberExpression",
      "JSXNamespacedName",
      "JSXOpeningElement",
      "JSXSpreadAttribute",
      "JSXText",
      "JSXFragment",
      "JSXOpeningFragment",
      "JSXClosingFragment"
    ],
    "LITERAL": [
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "RegExpLiteral",
      "TemplateLiteral",
      "BigIntLiteral",
      "DecimalLiteral"
    ],
    "LOOP": [
      "DoWhileStatement",
      "ForInStatement",
      "ForStatement",
      "WhileStatement",
      "ForOfStatement"
    ],
    "LVAL": [
      "Identifier",
      "MemberExpression",
      "RestElement",
      "AssignmentPattern",
      "ArrayPattern",
      "ObjectPattern",
      "TSParameterProperty",
      "TSAsExpression",
      "TSSatisfiesExpression",
      "TSTypeAssertion",
      "TSNonNullExpression"
    ],
    "METHOD": [
      "ObjectMethod",
      "ClassMethod",
      "ClassPrivateMethod"
    ],
    "MISCELLANEOUS": [
      "Noop",
      "Placeholder",
      "V8IntrinsicIdentifier"
    ],
    "MODULEDECLARATION": [
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ImportDeclaration"
    ],
    "MODULESPECIFIER": [
      "ExportSpecifier",
      "ImportDefaultSpecifier",
      "ImportNamespaceSpecifier",
      "ImportSpecifier",
      "ExportNamespaceSpecifier",
      "ExportDefaultSpecifier"
    ],
    "OBJECTMEMBER": [
      "ObjectMethod",
      "ObjectProperty"
    ],
    "PATTERNLIKE": [
      "Identifier",
      "MemberExpression",
      "RestElement",
      "AssignmentPattern",
      "ArrayPattern",
      "ObjectPattern",
      "VoidPattern",
      "TSAsExpression",
      "TSSatisfiesExpression",
      "TSTypeAssertion",
      "TSNonNullExpression"
    ],
    "PATTERN": [
      "AssignmentPattern",
      "ArrayPattern",
      "ObjectPattern",
      "VoidPattern"
    ],
    "PRIVATE": [
      "ClassPrivateProperty",
      "ClassPrivateMethod",
      "PrivateName"
    ],
    "PROPERTY": [
      "ObjectProperty",
      "ClassProperty",
      "ClassAccessorProperty",
      "ClassPrivateProperty"
    ],
    "PUREISH": [
      "FunctionDeclaration",
      "FunctionExpression",
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "RegExpLiteral",
      "ArrowFunctionExpression",
      "BigIntLiteral",
      "DecimalLiteral"
    ],
    "SCOPABLE": [
      "BlockStatement",
      "CatchClause",
      "DoWhileStatement",
      "ForInStatement",
      "ForStatement",
      "FunctionDeclaration",
      "FunctionExpression",
      "Program",
      "ObjectMethod",
      "SwitchStatement",
      "WhileStatement",
      "ArrowFunctionExpression",
      "ClassExpression",
      "ClassDeclaration",
      "ForOfStatement",
      "ClassMethod",
      "ClassPrivateMethod",
      "StaticBlock",
      "TSModuleBlock"
    ],
    "STANDARDIZED": [
      "ArrayExpression",
      "AssignmentExpression",
      "BinaryExpression",
      "InterpreterDirective",
      "Directive",
      "DirectiveLiteral",
      "BlockStatement",
      "BreakStatement",
      "CallExpression",
      "CatchClause",
      "ConditionalExpression",
      "ContinueStatement",
      "DebuggerStatement",
      "DoWhileStatement",
      "EmptyStatement",
      "ExpressionStatement",
      "File",
      "ForInStatement",
      "ForStatement",
      "FunctionDeclaration",
      "FunctionExpression",
      "Identifier",
      "IfStatement",
      "LabeledStatement",
      "StringLiteral",
      "NumericLiteral",
      "NullLiteral",
      "BooleanLiteral",
      "RegExpLiteral",
      "LogicalExpression",
      "MemberExpression",
      "NewExpression",
      "Program",
      "ObjectExpression",
      "ObjectMethod",
      "ObjectProperty",
      "RestElement",
      "ReturnStatement",
      "SequenceExpression",
      "ParenthesizedExpression",
      "SwitchCase",
      "SwitchStatement",
      "ThisExpression",
      "ThrowStatement",
      "TryStatement",
      "UnaryExpression",
      "UpdateExpression",
      "VariableDeclaration",
      "VariableDeclarator",
      "WhileStatement",
      "WithStatement",
      "AssignmentPattern",
      "ArrayPattern",
      "ArrowFunctionExpression",
      "ClassBody",
      "ClassExpression",
      "ClassDeclaration",
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ExportSpecifier",
      "ForOfStatement",
      "ImportDeclaration",
      "ImportDefaultSpecifier",
      "ImportNamespaceSpecifier",
      "ImportSpecifier",
      "ImportExpression",
      "MetaProperty",
      "ClassMethod",
      "ObjectPattern",
      "SpreadElement",
      "Super",
      "TaggedTemplateExpression",
      "TemplateElement",
      "TemplateLiteral",
      "YieldExpression",
      "AwaitExpression",
      "Import",
      "BigIntLiteral",
      "ExportNamespaceSpecifier",
      "OptionalMemberExpression",
      "OptionalCallExpression",
      "ClassProperty",
      "ClassAccessorProperty",
      "ClassPrivateProperty",
      "ClassPrivateMethod",
      "PrivateName",
      "StaticBlock",
      "ImportAttribute"
    ],
    "STATEMENT": [
      "BlockStatement",
      "BreakStatement",
      "ContinueStatement",
      "DebuggerStatement",
      "DoWhileStatement",
      "EmptyStatement",
      "ExpressionStatement",
      "ForInStatement",
      "ForStatement",
      "FunctionDeclaration",
      "IfStatement",
      "LabeledStatement",
      "ReturnStatement",
      "SwitchStatement",
      "ThrowStatement",
      "TryStatement",
      "VariableDeclaration",
      "WhileStatement",
      "WithStatement",
      "ClassDeclaration",
      "ExportAllDeclaration",
      "ExportDefaultDeclaration",
      "ExportNamedDeclaration",
      "ForOfStatement",
      "ImportDeclaration",
      "DeclareClass",
      "DeclareFunction",
      "DeclareInterface",
      "DeclareModule",
      "DeclareModuleExports",
      "DeclareTypeAlias",
      "DeclareOpaqueType",
      "DeclareVariable",
      "DeclareExportDeclaration",
      "DeclareExportAllDeclaration",
      "InterfaceDeclaration",
      "OpaqueType",
      "TypeAlias",
      "EnumDeclaration",
      "TSDeclareFunction",
      "TSInterfaceDeclaration",
      "TSTypeAliasDeclaration",
      "TSEnumDeclaration",
      "TSModuleDeclaration",
      "TSImportEqualsDeclaration",
      "TSExportAssignment",
      "TSNamespaceExportDeclaration"
    ],
    "TERMINATORLESS": [
      "BreakStatement",
      "ContinueStatement",
      "ReturnStatement",
      "ThrowStatement",
      "YieldExpression",
      "AwaitExpression"
    ],
    "TSBASETYPE": [
      "TSAnyKeyword",
      "TSBooleanKeyword",
      "TSBigIntKeyword",
      "TSIntrinsicKeyword",
      "TSNeverKeyword",
      "TSNullKeyword",
      "TSNumberKeyword",
      "TSObjectKeyword",
      "TSStringKeyword",
      "TSSymbolKeyword",
      "TSUndefinedKeyword",
      "TSUnknownKeyword",
      "TSVoidKeyword",
      "TSThisType",
      "TSTemplateLiteralType",
      "TSLiteralType"
    ],
    "TSENTITYNAME": [
      "Identifier",
      "TSQualifiedName"
    ],
    "TSTYPEELEMENT": [
      "TSCallSignatureDeclaration",
      "TSConstructSignatureDeclaration",
      "TSPropertySignature",
      "TSMethodSignature",
      "TSIndexSignature"
    ],
    "TSTYPE": [
      "TSAnyKeyword",
      "TSBooleanKeyword",
      "TSBigIntKeyword",
      "TSIntrinsicKeyword",
      "TSNeverKeyword",
      "TSNullKeyword",
      "TSNumberKeyword",
      "TSObjectKeyword",
      "TSStringKeyword",
      "TSSymbolKeyword",
      "TSUndefinedKeyword",
      "TSUnknownKeyword",
      "TSVoidKeyword",
      "TSThisType",
      "TSFunctionType",
      "TSConstructorType",
      "TSTypeReference",
      "TSTypePredicate",
      "TSTypeQuery",
      "TSTypeLiteral",
      "TSArrayType",
      "TSTupleType",
      "TSOptionalType",
      "TSRestType",
      "TSUnionType",
      "TSIntersectionType",
      "TSConditionalType",
      "TSInferType",
      "TSParenthesizedType",
      "TSTypeOperator",
      "TSIndexedAccessType",
      "TSMappedType",
      "TSTemplateLiteralType",
      "TSLiteralType",
      "TSExpressionWithTypeArguments",
      "TSImportType"
    ],
    "TYPESCRIPT": [
      "TSParameterProperty",
      "TSDeclareFunction",
      "TSDeclareMethod",
      "TSQualifiedName",
      "TSCallSignatureDeclaration",
      "TSConstructSignatureDeclaration",
      "TSPropertySignature",
      "TSMethodSignature",
      "TSIndexSignature",
      "TSAnyKeyword",
      "TSBooleanKeyword",
      "TSBigIntKeyword",
      "TSIntrinsicKeyword",
      "TSNeverKeyword",
      "TSNullKeyword",
      "TSNumberKeyword",
      "TSObjectKeyword",
      "TSStringKeyword",
      "TSSymbolKeyword",
      "TSUndefinedKeyword",
      "TSUnknownKeyword",
      "TSVoidKeyword",
      "TSThisType",
      "TSFunctionType",
      "TSConstructorType",
      "TSTypeReference",
      "TSTypePredicate",
      "TSTypeQuery",
      "TSTypeLiteral",
      "TSArrayType",
      "TSTupleType",
      "TSOptionalType",
      "TSRestType",
      "TSNamedTupleMember",
      "TSUnionType",
      "TSIntersectionType",
      "TSConditionalType",
      "TSInferType",
      "TSParenthesizedType",
      "TSTypeOperator",
      "TSIndexedAccessType",
      "TSMappedType",
      "TSTemplateLiteralType",
      "TSLiteralType",
      "TSExpressionWithTypeArguments",
      "TSInterfaceDeclaration",
      "TSInterfaceBody",
      "TSTypeAliasDeclaration",
      "TSInstantiationExpression",
      "TSAsExpression",
      "TSSatisfiesExpression",
      "TSTypeAssertion",
      "TSEnumBody",
      "TSEnumDeclaration",
      "TSEnumMember",
      "TSModuleDeclaration",
      "TSModuleBlock",
      "TSImportType",
      "TSImportEqualsDeclaration",
      "TSExternalModuleReference",
      "TSNonNullExpression",
      "TSExportAssignment",
      "TSNamespaceExportDeclaration",
      "TSTypeAnnotation",
      "TSTypeParameterInstantiation",
      "TSTypeParameterDeclaration",
      "TSTypeParameter"
    ],
    "UNARYLIKE": [
      "UnaryExpression",
      "SpreadElement"
    ],
    "USERWHITESPACABLE": [
      "ObjectMethod",
      "ObjectProperty",
      "ObjectTypeInternalSlot",
      "ObjectTypeCallProperty",
      "ObjectTypeIndexer",
      "ObjectTypeProperty",
      "ObjectTypeSpreadProperty"
    ],
    "WHILE": [
      "DoWhileStatement",
      "WhileStatement"
    ]
  },
  "strataCategories": [
    "Expression",
    "Statement",
    "Declaration",
    "Pattern",
    "FunctionParameter",
    "PatternLike",
    "TSType",
    "TSEntityName"
  ],
  "summary": {
    "totalNodeTypes": 253,
    "totalTypeAliases": 51,
    "expressionTypes": 52,
    "statementTypes": 47,
    "strataCategories": 8,
    "typescriptNodes": 67,
    "extractedAt": "2025-08-20T14:21:53.353Z"
  }
}